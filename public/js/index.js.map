{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/sortablejs/Sortable.js","src/js/index.js","src/js/modules/notify.mjs","src/js/modules/preferences/dashboard.mjs","src/js/modules/preferences/menu.mjs","src/js/modules/search.mjs","src/js/modules/unreadAnnouncements.mjs","src/js/modules/utils.mjs","src/js/web-components/announcements.mjs","src/js/web-components/course-overview.mjs","src/js/web-components/schedule.mjs","src/js/web-components/study-progress.mjs","src/js/web-components/urgent-announcement.mjs"],"names":[],"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","file":"index.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/**!\n * Sortable 1.10.2\n * @author\tRubaXa   <trash@rubaxa.org>\n * @author\towenm    <owen23355@gmail.com>\n * @license MIT\n */\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (global = global || self, global.Sortable = factory());\n}(this, function () { 'use strict';\n\n  function _typeof(obj) {\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n      _typeof = function (obj) {\n        return typeof obj;\n      };\n    } else {\n      _typeof = function (obj) {\n        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n      };\n    }\n\n    return _typeof(obj);\n  }\n\n  function _defineProperty(obj, key, value) {\n    if (key in obj) {\n      Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    } else {\n      obj[key] = value;\n    }\n\n    return obj;\n  }\n\n  function _extends() {\n    _extends = Object.assign || function (target) {\n      for (var i = 1; i < arguments.length; i++) {\n        var source = arguments[i];\n\n        for (var key in source) {\n          if (Object.prototype.hasOwnProperty.call(source, key)) {\n            target[key] = source[key];\n          }\n        }\n      }\n\n      return target;\n    };\n\n    return _extends.apply(this, arguments);\n  }\n\n  function _objectSpread(target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i] != null ? arguments[i] : {};\n      var ownKeys = Object.keys(source);\n\n      if (typeof Object.getOwnPropertySymbols === 'function') {\n        ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n          return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n        }));\n      }\n\n      ownKeys.forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    }\n\n    return target;\n  }\n\n  function _objectWithoutPropertiesLoose(source, excluded) {\n    if (source == null) return {};\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key, i;\n\n    for (i = 0; i < sourceKeys.length; i++) {\n      key = sourceKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      target[key] = source[key];\n    }\n\n    return target;\n  }\n\n  function _objectWithoutProperties(source, excluded) {\n    if (source == null) return {};\n\n    var target = _objectWithoutPropertiesLoose(source, excluded);\n\n    var key, i;\n\n    if (Object.getOwnPropertySymbols) {\n      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n      for (i = 0; i < sourceSymbolKeys.length; i++) {\n        key = sourceSymbolKeys[i];\n        if (excluded.indexOf(key) >= 0) continue;\n        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n        target[key] = source[key];\n      }\n    }\n\n    return target;\n  }\n\n  function _toConsumableArray(arr) {\n    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n  }\n\n  function _arrayWithoutHoles(arr) {\n    if (Array.isArray(arr)) {\n      for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n      return arr2;\n    }\n  }\n\n  function _iterableToArray(iter) {\n    if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n  }\n\n  function _nonIterableSpread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n  }\n\n  var version = \"1.10.2\";\n\n  function userAgent(pattern) {\n    if (typeof window !== 'undefined' && window.navigator) {\n      return !!\n      /*@__PURE__*/\n      navigator.userAgent.match(pattern);\n    }\n  }\n\n  var IE11OrLess = userAgent(/(?:Trident.*rv[ :]?11\\.|msie|iemobile|Windows Phone)/i);\n  var Edge = userAgent(/Edge/i);\n  var FireFox = userAgent(/firefox/i);\n  var Safari = userAgent(/safari/i) && !userAgent(/chrome/i) && !userAgent(/android/i);\n  var IOS = userAgent(/iP(ad|od|hone)/i);\n  var ChromeForAndroid = userAgent(/chrome/i) && userAgent(/android/i);\n\n  var captureMode = {\n    capture: false,\n    passive: false\n  };\n\n  function on(el, event, fn) {\n    el.addEventListener(event, fn, !IE11OrLess && captureMode);\n  }\n\n  function off(el, event, fn) {\n    el.removeEventListener(event, fn, !IE11OrLess && captureMode);\n  }\n\n  function matches(\n  /**HTMLElement*/\n  el,\n  /**String*/\n  selector) {\n    if (!selector) return;\n    selector[0] === '>' && (selector = selector.substring(1));\n\n    if (el) {\n      try {\n        if (el.matches) {\n          return el.matches(selector);\n        } else if (el.msMatchesSelector) {\n          return el.msMatchesSelector(selector);\n        } else if (el.webkitMatchesSelector) {\n          return el.webkitMatchesSelector(selector);\n        }\n      } catch (_) {\n        return false;\n      }\n    }\n\n    return false;\n  }\n\n  function getParentOrHost(el) {\n    return el.host && el !== document && el.host.nodeType ? el.host : el.parentNode;\n  }\n\n  function closest(\n  /**HTMLElement*/\n  el,\n  /**String*/\n  selector,\n  /**HTMLElement*/\n  ctx, includeCTX) {\n    if (el) {\n      ctx = ctx || document;\n\n      do {\n        if (selector != null && (selector[0] === '>' ? el.parentNode === ctx && matches(el, selector) : matches(el, selector)) || includeCTX && el === ctx) {\n          return el;\n        }\n\n        if (el === ctx) break;\n        /* jshint boss:true */\n      } while (el = getParentOrHost(el));\n    }\n\n    return null;\n  }\n\n  var R_SPACE = /\\s+/g;\n\n  function toggleClass(el, name, state) {\n    if (el && name) {\n      if (el.classList) {\n        el.classList[state ? 'add' : 'remove'](name);\n      } else {\n        var className = (' ' + el.className + ' ').replace(R_SPACE, ' ').replace(' ' + name + ' ', ' ');\n        el.className = (className + (state ? ' ' + name : '')).replace(R_SPACE, ' ');\n      }\n    }\n  }\n\n  function css(el, prop, val) {\n    var style = el && el.style;\n\n    if (style) {\n      if (val === void 0) {\n        if (document.defaultView && document.defaultView.getComputedStyle) {\n          val = document.defaultView.getComputedStyle(el, '');\n        } else if (el.currentStyle) {\n          val = el.currentStyle;\n        }\n\n        return prop === void 0 ? val : val[prop];\n      } else {\n        if (!(prop in style) && prop.indexOf('webkit') === -1) {\n          prop = '-webkit-' + prop;\n        }\n\n        style[prop] = val + (typeof val === 'string' ? '' : 'px');\n      }\n    }\n  }\n\n  function matrix(el, selfOnly) {\n    var appliedTransforms = '';\n\n    if (typeof el === 'string') {\n      appliedTransforms = el;\n    } else {\n      do {\n        var transform = css(el, 'transform');\n\n        if (transform && transform !== 'none') {\n          appliedTransforms = transform + ' ' + appliedTransforms;\n        }\n        /* jshint boss:true */\n\n      } while (!selfOnly && (el = el.parentNode));\n    }\n\n    var matrixFn = window.DOMMatrix || window.WebKitCSSMatrix || window.CSSMatrix || window.MSCSSMatrix;\n    /*jshint -W056 */\n\n    return matrixFn && new matrixFn(appliedTransforms);\n  }\n\n  function find(ctx, tagName, iterator) {\n    if (ctx) {\n      var list = ctx.getElementsByTagName(tagName),\n          i = 0,\n          n = list.length;\n\n      if (iterator) {\n        for (; i < n; i++) {\n          iterator(list[i], i);\n        }\n      }\n\n      return list;\n    }\n\n    return [];\n  }\n\n  function getWindowScrollingElement() {\n    var scrollingElement = document.scrollingElement;\n\n    if (scrollingElement) {\n      return scrollingElement;\n    } else {\n      return document.documentElement;\n    }\n  }\n  /**\r\n   * Returns the \"bounding client rect\" of given element\r\n   * @param  {HTMLElement} el                       The element whose boundingClientRect is wanted\r\n   * @param  {[Boolean]} relativeToContainingBlock  Whether the rect should be relative to the containing block of (including) the container\r\n   * @param  {[Boolean]} relativeToNonStaticParent  Whether the rect should be relative to the relative parent of (including) the contaienr\r\n   * @param  {[Boolean]} undoScale                  Whether the container's scale() should be undone\r\n   * @param  {[HTMLElement]} container              The parent the element will be placed in\r\n   * @return {Object}                               The boundingClientRect of el, with specified adjustments\r\n   */\n\n\n  function getRect(el, relativeToContainingBlock, relativeToNonStaticParent, undoScale, container) {\n    if (!el.getBoundingClientRect && el !== window) return;\n    var elRect, top, left, bottom, right, height, width;\n\n    if (el !== window && el !== getWindowScrollingElement()) {\n      elRect = el.getBoundingClientRect();\n      top = elRect.top;\n      left = elRect.left;\n      bottom = elRect.bottom;\n      right = elRect.right;\n      height = elRect.height;\n      width = elRect.width;\n    } else {\n      top = 0;\n      left = 0;\n      bottom = window.innerHeight;\n      right = window.innerWidth;\n      height = window.innerHeight;\n      width = window.innerWidth;\n    }\n\n    if ((relativeToContainingBlock || relativeToNonStaticParent) && el !== window) {\n      // Adjust for translate()\n      container = container || el.parentNode; // solves #1123 (see: https://stackoverflow.com/a/37953806/6088312)\n      // Not needed on <= IE11\n\n      if (!IE11OrLess) {\n        do {\n          if (container && container.getBoundingClientRect && (css(container, 'transform') !== 'none' || relativeToNonStaticParent && css(container, 'position') !== 'static')) {\n            var containerRect = container.getBoundingClientRect(); // Set relative to edges of padding box of container\n\n            top -= containerRect.top + parseInt(css(container, 'border-top-width'));\n            left -= containerRect.left + parseInt(css(container, 'border-left-width'));\n            bottom = top + elRect.height;\n            right = left + elRect.width;\n            break;\n          }\n          /* jshint boss:true */\n\n        } while (container = container.parentNode);\n      }\n    }\n\n    if (undoScale && el !== window) {\n      // Adjust for scale()\n      var elMatrix = matrix(container || el),\n          scaleX = elMatrix && elMatrix.a,\n          scaleY = elMatrix && elMatrix.d;\n\n      if (elMatrix) {\n        top /= scaleY;\n        left /= scaleX;\n        width /= scaleX;\n        height /= scaleY;\n        bottom = top + height;\n        right = left + width;\n      }\n    }\n\n    return {\n      top: top,\n      left: left,\n      bottom: bottom,\n      right: right,\n      width: width,\n      height: height\n    };\n  }\n  /**\r\n   * Checks if a side of an element is scrolled past a side of its parents\r\n   * @param  {HTMLElement}  el           The element who's side being scrolled out of view is in question\r\n   * @param  {String}       elSide       Side of the element in question ('top', 'left', 'right', 'bottom')\r\n   * @param  {String}       parentSide   Side of the parent in question ('top', 'left', 'right', 'bottom')\r\n   * @return {HTMLElement}               The parent scroll element that the el's side is scrolled past, or null if there is no such element\r\n   */\n\n\n  function isScrolledPast(el, elSide, parentSide) {\n    var parent = getParentAutoScrollElement(el, true),\n        elSideVal = getRect(el)[elSide];\n    /* jshint boss:true */\n\n    while (parent) {\n      var parentSideVal = getRect(parent)[parentSide],\n          visible = void 0;\n\n      if (parentSide === 'top' || parentSide === 'left') {\n        visible = elSideVal >= parentSideVal;\n      } else {\n        visible = elSideVal <= parentSideVal;\n      }\n\n      if (!visible) return parent;\n      if (parent === getWindowScrollingElement()) break;\n      parent = getParentAutoScrollElement(parent, false);\n    }\n\n    return false;\n  }\n  /**\r\n   * Gets nth child of el, ignoring hidden children, sortable's elements (does not ignore clone if it's visible)\r\n   * and non-draggable elements\r\n   * @param  {HTMLElement} el       The parent element\r\n   * @param  {Number} childNum      The index of the child\r\n   * @param  {Object} options       Parent Sortable's options\r\n   * @return {HTMLElement}          The child at index childNum, or null if not found\r\n   */\n\n\n  function getChild(el, childNum, options) {\n    var currentChild = 0,\n        i = 0,\n        children = el.children;\n\n    while (i < children.length) {\n      if (children[i].style.display !== 'none' && children[i] !== Sortable.ghost && children[i] !== Sortable.dragged && closest(children[i], options.draggable, el, false)) {\n        if (currentChild === childNum) {\n          return children[i];\n        }\n\n        currentChild++;\n      }\n\n      i++;\n    }\n\n    return null;\n  }\n  /**\r\n   * Gets the last child in the el, ignoring ghostEl or invisible elements (clones)\r\n   * @param  {HTMLElement} el       Parent element\r\n   * @param  {selector} selector    Any other elements that should be ignored\r\n   * @return {HTMLElement}          The last child, ignoring ghostEl\r\n   */\n\n\n  function lastChild(el, selector) {\n    var last = el.lastElementChild;\n\n    while (last && (last === Sortable.ghost || css(last, 'display') === 'none' || selector && !matches(last, selector))) {\n      last = last.previousElementSibling;\n    }\n\n    return last || null;\n  }\n  /**\r\n   * Returns the index of an element within its parent for a selected set of\r\n   * elements\r\n   * @param  {HTMLElement} el\r\n   * @param  {selector} selector\r\n   * @return {number}\r\n   */\n\n\n  function index(el, selector) {\n    var index = 0;\n\n    if (!el || !el.parentNode) {\n      return -1;\n    }\n    /* jshint boss:true */\n\n\n    while (el = el.previousElementSibling) {\n      if (el.nodeName.toUpperCase() !== 'TEMPLATE' && el !== Sortable.clone && (!selector || matches(el, selector))) {\n        index++;\n      }\n    }\n\n    return index;\n  }\n  /**\r\n   * Returns the scroll offset of the given element, added with all the scroll offsets of parent elements.\r\n   * The value is returned in real pixels.\r\n   * @param  {HTMLElement} el\r\n   * @return {Array}             Offsets in the format of [left, top]\r\n   */\n\n\n  function getRelativeScrollOffset(el) {\n    var offsetLeft = 0,\n        offsetTop = 0,\n        winScroller = getWindowScrollingElement();\n\n    if (el) {\n      do {\n        var elMatrix = matrix(el),\n            scaleX = elMatrix.a,\n            scaleY = elMatrix.d;\n        offsetLeft += el.scrollLeft * scaleX;\n        offsetTop += el.scrollTop * scaleY;\n      } while (el !== winScroller && (el = el.parentNode));\n    }\n\n    return [offsetLeft, offsetTop];\n  }\n  /**\r\n   * Returns the index of the object within the given array\r\n   * @param  {Array} arr   Array that may or may not hold the object\r\n   * @param  {Object} obj  An object that has a key-value pair unique to and identical to a key-value pair in the object you want to find\r\n   * @return {Number}      The index of the object in the array, or -1\r\n   */\n\n\n  function indexOfObject(arr, obj) {\n    for (var i in arr) {\n      if (!arr.hasOwnProperty(i)) continue;\n\n      for (var key in obj) {\n        if (obj.hasOwnProperty(key) && obj[key] === arr[i][key]) return Number(i);\n      }\n    }\n\n    return -1;\n  }\n\n  function getParentAutoScrollElement(el, includeSelf) {\n    // skip to window\n    if (!el || !el.getBoundingClientRect) return getWindowScrollingElement();\n    var elem = el;\n    var gotSelf = false;\n\n    do {\n      // we don't need to get elem css if it isn't even overflowing in the first place (performance)\n      if (elem.clientWidth < elem.scrollWidth || elem.clientHeight < elem.scrollHeight) {\n        var elemCSS = css(elem);\n\n        if (elem.clientWidth < elem.scrollWidth && (elemCSS.overflowX == 'auto' || elemCSS.overflowX == 'scroll') || elem.clientHeight < elem.scrollHeight && (elemCSS.overflowY == 'auto' || elemCSS.overflowY == 'scroll')) {\n          if (!elem.getBoundingClientRect || elem === document.body) return getWindowScrollingElement();\n          if (gotSelf || includeSelf) return elem;\n          gotSelf = true;\n        }\n      }\n      /* jshint boss:true */\n\n    } while (elem = elem.parentNode);\n\n    return getWindowScrollingElement();\n  }\n\n  function extend(dst, src) {\n    if (dst && src) {\n      for (var key in src) {\n        if (src.hasOwnProperty(key)) {\n          dst[key] = src[key];\n        }\n      }\n    }\n\n    return dst;\n  }\n\n  function isRectEqual(rect1, rect2) {\n    return Math.round(rect1.top) === Math.round(rect2.top) && Math.round(rect1.left) === Math.round(rect2.left) && Math.round(rect1.height) === Math.round(rect2.height) && Math.round(rect1.width) === Math.round(rect2.width);\n  }\n\n  var _throttleTimeout;\n\n  function throttle(callback, ms) {\n    return function () {\n      if (!_throttleTimeout) {\n        var args = arguments,\n            _this = this;\n\n        if (args.length === 1) {\n          callback.call(_this, args[0]);\n        } else {\n          callback.apply(_this, args);\n        }\n\n        _throttleTimeout = setTimeout(function () {\n          _throttleTimeout = void 0;\n        }, ms);\n      }\n    };\n  }\n\n  function cancelThrottle() {\n    clearTimeout(_throttleTimeout);\n    _throttleTimeout = void 0;\n  }\n\n  function scrollBy(el, x, y) {\n    el.scrollLeft += x;\n    el.scrollTop += y;\n  }\n\n  function clone(el) {\n    var Polymer = window.Polymer;\n    var $ = window.jQuery || window.Zepto;\n\n    if (Polymer && Polymer.dom) {\n      return Polymer.dom(el).cloneNode(true);\n    } else if ($) {\n      return $(el).clone(true)[0];\n    } else {\n      return el.cloneNode(true);\n    }\n  }\n\n  function setRect(el, rect) {\n    css(el, 'position', 'absolute');\n    css(el, 'top', rect.top);\n    css(el, 'left', rect.left);\n    css(el, 'width', rect.width);\n    css(el, 'height', rect.height);\n  }\n\n  function unsetRect(el) {\n    css(el, 'position', '');\n    css(el, 'top', '');\n    css(el, 'left', '');\n    css(el, 'width', '');\n    css(el, 'height', '');\n  }\n\n  var expando = 'Sortable' + new Date().getTime();\n\n  function AnimationStateManager() {\n    var animationStates = [],\n        animationCallbackId;\n    return {\n      captureAnimationState: function captureAnimationState() {\n        animationStates = [];\n        if (!this.options.animation) return;\n        var children = [].slice.call(this.el.children);\n        children.forEach(function (child) {\n          if (css(child, 'display') === 'none' || child === Sortable.ghost) return;\n          animationStates.push({\n            target: child,\n            rect: getRect(child)\n          });\n\n          var fromRect = _objectSpread({}, animationStates[animationStates.length - 1].rect); // If animating: compensate for current animation\n\n\n          if (child.thisAnimationDuration) {\n            var childMatrix = matrix(child, true);\n\n            if (childMatrix) {\n              fromRect.top -= childMatrix.f;\n              fromRect.left -= childMatrix.e;\n            }\n          }\n\n          child.fromRect = fromRect;\n        });\n      },\n      addAnimationState: function addAnimationState(state) {\n        animationStates.push(state);\n      },\n      removeAnimationState: function removeAnimationState(target) {\n        animationStates.splice(indexOfObject(animationStates, {\n          target: target\n        }), 1);\n      },\n      animateAll: function animateAll(callback) {\n        var _this = this;\n\n        if (!this.options.animation) {\n          clearTimeout(animationCallbackId);\n          if (typeof callback === 'function') callback();\n          return;\n        }\n\n        var animating = false,\n            animationTime = 0;\n        animationStates.forEach(function (state) {\n          var time = 0,\n              target = state.target,\n              fromRect = target.fromRect,\n              toRect = getRect(target),\n              prevFromRect = target.prevFromRect,\n              prevToRect = target.prevToRect,\n              animatingRect = state.rect,\n              targetMatrix = matrix(target, true);\n\n          if (targetMatrix) {\n            // Compensate for current animation\n            toRect.top -= targetMatrix.f;\n            toRect.left -= targetMatrix.e;\n          }\n\n          target.toRect = toRect;\n\n          if (target.thisAnimationDuration) {\n            // Could also check if animatingRect is between fromRect and toRect\n            if (isRectEqual(prevFromRect, toRect) && !isRectEqual(fromRect, toRect) && // Make sure animatingRect is on line between toRect & fromRect\n            (animatingRect.top - toRect.top) / (animatingRect.left - toRect.left) === (fromRect.top - toRect.top) / (fromRect.left - toRect.left)) {\n              // If returning to same place as started from animation and on same axis\n              time = calculateRealTime(animatingRect, prevFromRect, prevToRect, _this.options);\n            }\n          } // if fromRect != toRect: animate\n\n\n          if (!isRectEqual(toRect, fromRect)) {\n            target.prevFromRect = fromRect;\n            target.prevToRect = toRect;\n\n            if (!time) {\n              time = _this.options.animation;\n            }\n\n            _this.animate(target, animatingRect, toRect, time);\n          }\n\n          if (time) {\n            animating = true;\n            animationTime = Math.max(animationTime, time);\n            clearTimeout(target.animationResetTimer);\n            target.animationResetTimer = setTimeout(function () {\n              target.animationTime = 0;\n              target.prevFromRect = null;\n              target.fromRect = null;\n              target.prevToRect = null;\n              target.thisAnimationDuration = null;\n            }, time);\n            target.thisAnimationDuration = time;\n          }\n        });\n        clearTimeout(animationCallbackId);\n\n        if (!animating) {\n          if (typeof callback === 'function') callback();\n        } else {\n          animationCallbackId = setTimeout(function () {\n            if (typeof callback === 'function') callback();\n          }, animationTime);\n        }\n\n        animationStates = [];\n      },\n      animate: function animate(target, currentRect, toRect, duration) {\n        if (duration) {\n          css(target, 'transition', '');\n          css(target, 'transform', '');\n          var elMatrix = matrix(this.el),\n              scaleX = elMatrix && elMatrix.a,\n              scaleY = elMatrix && elMatrix.d,\n              translateX = (currentRect.left - toRect.left) / (scaleX || 1),\n              translateY = (currentRect.top - toRect.top) / (scaleY || 1);\n          target.animatingX = !!translateX;\n          target.animatingY = !!translateY;\n          css(target, 'transform', 'translate3d(' + translateX + 'px,' + translateY + 'px,0)');\n          repaint(target); // repaint\n\n          css(target, 'transition', 'transform ' + duration + 'ms' + (this.options.easing ? ' ' + this.options.easing : ''));\n          css(target, 'transform', 'translate3d(0,0,0)');\n          typeof target.animated === 'number' && clearTimeout(target.animated);\n          target.animated = setTimeout(function () {\n            css(target, 'transition', '');\n            css(target, 'transform', '');\n            target.animated = false;\n            target.animatingX = false;\n            target.animatingY = false;\n          }, duration);\n        }\n      }\n    };\n  }\n\n  function repaint(target) {\n    return target.offsetWidth;\n  }\n\n  function calculateRealTime(animatingRect, fromRect, toRect, options) {\n    return Math.sqrt(Math.pow(fromRect.top - animatingRect.top, 2) + Math.pow(fromRect.left - animatingRect.left, 2)) / Math.sqrt(Math.pow(fromRect.top - toRect.top, 2) + Math.pow(fromRect.left - toRect.left, 2)) * options.animation;\n  }\n\n  var plugins = [];\n  var defaults = {\n    initializeByDefault: true\n  };\n  var PluginManager = {\n    mount: function mount(plugin) {\n      // Set default static properties\n      for (var option in defaults) {\n        if (defaults.hasOwnProperty(option) && !(option in plugin)) {\n          plugin[option] = defaults[option];\n        }\n      }\n\n      plugins.push(plugin);\n    },\n    pluginEvent: function pluginEvent(eventName, sortable, evt) {\n      var _this = this;\n\n      this.eventCanceled = false;\n\n      evt.cancel = function () {\n        _this.eventCanceled = true;\n      };\n\n      var eventNameGlobal = eventName + 'Global';\n      plugins.forEach(function (plugin) {\n        if (!sortable[plugin.pluginName]) return; // Fire global events if it exists in this sortable\n\n        if (sortable[plugin.pluginName][eventNameGlobal]) {\n          sortable[plugin.pluginName][eventNameGlobal](_objectSpread({\n            sortable: sortable\n          }, evt));\n        } // Only fire plugin event if plugin is enabled in this sortable,\n        // and plugin has event defined\n\n\n        if (sortable.options[plugin.pluginName] && sortable[plugin.pluginName][eventName]) {\n          sortable[plugin.pluginName][eventName](_objectSpread({\n            sortable: sortable\n          }, evt));\n        }\n      });\n    },\n    initializePlugins: function initializePlugins(sortable, el, defaults, options) {\n      plugins.forEach(function (plugin) {\n        var pluginName = plugin.pluginName;\n        if (!sortable.options[pluginName] && !plugin.initializeByDefault) return;\n        var initialized = new plugin(sortable, el, sortable.options);\n        initialized.sortable = sortable;\n        initialized.options = sortable.options;\n        sortable[pluginName] = initialized; // Add default options from plugin\n\n        _extends(defaults, initialized.defaults);\n      });\n\n      for (var option in sortable.options) {\n        if (!sortable.options.hasOwnProperty(option)) continue;\n        var modified = this.modifyOption(sortable, option, sortable.options[option]);\n\n        if (typeof modified !== 'undefined') {\n          sortable.options[option] = modified;\n        }\n      }\n    },\n    getEventProperties: function getEventProperties(name, sortable) {\n      var eventProperties = {};\n      plugins.forEach(function (plugin) {\n        if (typeof plugin.eventProperties !== 'function') return;\n\n        _extends(eventProperties, plugin.eventProperties.call(sortable[plugin.pluginName], name));\n      });\n      return eventProperties;\n    },\n    modifyOption: function modifyOption(sortable, name, value) {\n      var modifiedValue;\n      plugins.forEach(function (plugin) {\n        // Plugin must exist on the Sortable\n        if (!sortable[plugin.pluginName]) return; // If static option listener exists for this option, call in the context of the Sortable's instance of this plugin\n\n        if (plugin.optionListeners && typeof plugin.optionListeners[name] === 'function') {\n          modifiedValue = plugin.optionListeners[name].call(sortable[plugin.pluginName], value);\n        }\n      });\n      return modifiedValue;\n    }\n  };\n\n  function dispatchEvent(_ref) {\n    var sortable = _ref.sortable,\n        rootEl = _ref.rootEl,\n        name = _ref.name,\n        targetEl = _ref.targetEl,\n        cloneEl = _ref.cloneEl,\n        toEl = _ref.toEl,\n        fromEl = _ref.fromEl,\n        oldIndex = _ref.oldIndex,\n        newIndex = _ref.newIndex,\n        oldDraggableIndex = _ref.oldDraggableIndex,\n        newDraggableIndex = _ref.newDraggableIndex,\n        originalEvent = _ref.originalEvent,\n        putSortable = _ref.putSortable,\n        extraEventProperties = _ref.extraEventProperties;\n    sortable = sortable || rootEl && rootEl[expando];\n    if (!sortable) return;\n    var evt,\n        options = sortable.options,\n        onName = 'on' + name.charAt(0).toUpperCase() + name.substr(1); // Support for new CustomEvent feature\n\n    if (window.CustomEvent && !IE11OrLess && !Edge) {\n      evt = new CustomEvent(name, {\n        bubbles: true,\n        cancelable: true\n      });\n    } else {\n      evt = document.createEvent('Event');\n      evt.initEvent(name, true, true);\n    }\n\n    evt.to = toEl || rootEl;\n    evt.from = fromEl || rootEl;\n    evt.item = targetEl || rootEl;\n    evt.clone = cloneEl;\n    evt.oldIndex = oldIndex;\n    evt.newIndex = newIndex;\n    evt.oldDraggableIndex = oldDraggableIndex;\n    evt.newDraggableIndex = newDraggableIndex;\n    evt.originalEvent = originalEvent;\n    evt.pullMode = putSortable ? putSortable.lastPutMode : undefined;\n\n    var allEventProperties = _objectSpread({}, extraEventProperties, PluginManager.getEventProperties(name, sortable));\n\n    for (var option in allEventProperties) {\n      evt[option] = allEventProperties[option];\n    }\n\n    if (rootEl) {\n      rootEl.dispatchEvent(evt);\n    }\n\n    if (options[onName]) {\n      options[onName].call(sortable, evt);\n    }\n  }\n\n  var pluginEvent = function pluginEvent(eventName, sortable) {\n    var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n        originalEvent = _ref.evt,\n        data = _objectWithoutProperties(_ref, [\"evt\"]);\n\n    PluginManager.pluginEvent.bind(Sortable)(eventName, sortable, _objectSpread({\n      dragEl: dragEl,\n      parentEl: parentEl,\n      ghostEl: ghostEl,\n      rootEl: rootEl,\n      nextEl: nextEl,\n      lastDownEl: lastDownEl,\n      cloneEl: cloneEl,\n      cloneHidden: cloneHidden,\n      dragStarted: moved,\n      putSortable: putSortable,\n      activeSortable: Sortable.active,\n      originalEvent: originalEvent,\n      oldIndex: oldIndex,\n      oldDraggableIndex: oldDraggableIndex,\n      newIndex: newIndex,\n      newDraggableIndex: newDraggableIndex,\n      hideGhostForTarget: _hideGhostForTarget,\n      unhideGhostForTarget: _unhideGhostForTarget,\n      cloneNowHidden: function cloneNowHidden() {\n        cloneHidden = true;\n      },\n      cloneNowShown: function cloneNowShown() {\n        cloneHidden = false;\n      },\n      dispatchSortableEvent: function dispatchSortableEvent(name) {\n        _dispatchEvent({\n          sortable: sortable,\n          name: name,\n          originalEvent: originalEvent\n        });\n      }\n    }, data));\n  };\n\n  function _dispatchEvent(info) {\n    dispatchEvent(_objectSpread({\n      putSortable: putSortable,\n      cloneEl: cloneEl,\n      targetEl: dragEl,\n      rootEl: rootEl,\n      oldIndex: oldIndex,\n      oldDraggableIndex: oldDraggableIndex,\n      newIndex: newIndex,\n      newDraggableIndex: newDraggableIndex\n    }, info));\n  }\n\n  var dragEl,\n      parentEl,\n      ghostEl,\n      rootEl,\n      nextEl,\n      lastDownEl,\n      cloneEl,\n      cloneHidden,\n      oldIndex,\n      newIndex,\n      oldDraggableIndex,\n      newDraggableIndex,\n      activeGroup,\n      putSortable,\n      awaitingDragStarted = false,\n      ignoreNextClick = false,\n      sortables = [],\n      tapEvt,\n      touchEvt,\n      lastDx,\n      lastDy,\n      tapDistanceLeft,\n      tapDistanceTop,\n      moved,\n      lastTarget,\n      lastDirection,\n      pastFirstInvertThresh = false,\n      isCircumstantialInvert = false,\n      targetMoveDistance,\n      // For positioning ghost absolutely\n  ghostRelativeParent,\n      ghostRelativeParentInitialScroll = [],\n      // (left, top)\n  _silent = false,\n      savedInputChecked = [];\n  /** @const */\n\n  var documentExists = typeof document !== 'undefined',\n      PositionGhostAbsolutely = IOS,\n      CSSFloatProperty = Edge || IE11OrLess ? 'cssFloat' : 'float',\n      // This will not pass for IE9, because IE9 DnD only works on anchors\n  supportDraggable = documentExists && !ChromeForAndroid && !IOS && 'draggable' in document.createElement('div'),\n      supportCssPointerEvents = function () {\n    if (!documentExists) return; // false when <= IE11\n\n    if (IE11OrLess) {\n      return false;\n    }\n\n    var el = document.createElement('x');\n    el.style.cssText = 'pointer-events:auto';\n    return el.style.pointerEvents === 'auto';\n  }(),\n      _detectDirection = function _detectDirection(el, options) {\n    var elCSS = css(el),\n        elWidth = parseInt(elCSS.width) - parseInt(elCSS.paddingLeft) - parseInt(elCSS.paddingRight) - parseInt(elCSS.borderLeftWidth) - parseInt(elCSS.borderRightWidth),\n        child1 = getChild(el, 0, options),\n        child2 = getChild(el, 1, options),\n        firstChildCSS = child1 && css(child1),\n        secondChildCSS = child2 && css(child2),\n        firstChildWidth = firstChildCSS && parseInt(firstChildCSS.marginLeft) + parseInt(firstChildCSS.marginRight) + getRect(child1).width,\n        secondChildWidth = secondChildCSS && parseInt(secondChildCSS.marginLeft) + parseInt(secondChildCSS.marginRight) + getRect(child2).width;\n\n    if (elCSS.display === 'flex') {\n      return elCSS.flexDirection === 'column' || elCSS.flexDirection === 'column-reverse' ? 'vertical' : 'horizontal';\n    }\n\n    if (elCSS.display === 'grid') {\n      return elCSS.gridTemplateColumns.split(' ').length <= 1 ? 'vertical' : 'horizontal';\n    }\n\n    if (child1 && firstChildCSS[\"float\"] && firstChildCSS[\"float\"] !== 'none') {\n      var touchingSideChild2 = firstChildCSS[\"float\"] === 'left' ? 'left' : 'right';\n      return child2 && (secondChildCSS.clear === 'both' || secondChildCSS.clear === touchingSideChild2) ? 'vertical' : 'horizontal';\n    }\n\n    return child1 && (firstChildCSS.display === 'block' || firstChildCSS.display === 'flex' || firstChildCSS.display === 'table' || firstChildCSS.display === 'grid' || firstChildWidth >= elWidth && elCSS[CSSFloatProperty] === 'none' || child2 && elCSS[CSSFloatProperty] === 'none' && firstChildWidth + secondChildWidth > elWidth) ? 'vertical' : 'horizontal';\n  },\n      _dragElInRowColumn = function _dragElInRowColumn(dragRect, targetRect, vertical) {\n    var dragElS1Opp = vertical ? dragRect.left : dragRect.top,\n        dragElS2Opp = vertical ? dragRect.right : dragRect.bottom,\n        dragElOppLength = vertical ? dragRect.width : dragRect.height,\n        targetS1Opp = vertical ? targetRect.left : targetRect.top,\n        targetS2Opp = vertical ? targetRect.right : targetRect.bottom,\n        targetOppLength = vertical ? targetRect.width : targetRect.height;\n    return dragElS1Opp === targetS1Opp || dragElS2Opp === targetS2Opp || dragElS1Opp + dragElOppLength / 2 === targetS1Opp + targetOppLength / 2;\n  },\n\n  /**\n   * Detects first nearest empty sortable to X and Y position using emptyInsertThreshold.\n   * @param  {Number} x      X position\n   * @param  {Number} y      Y position\n   * @return {HTMLElement}   Element of the first found nearest Sortable\n   */\n  _detectNearestEmptySortable = function _detectNearestEmptySortable(x, y) {\n    var ret;\n    sortables.some(function (sortable) {\n      if (lastChild(sortable)) return;\n      var rect = getRect(sortable),\n          threshold = sortable[expando].options.emptyInsertThreshold,\n          insideHorizontally = x >= rect.left - threshold && x <= rect.right + threshold,\n          insideVertically = y >= rect.top - threshold && y <= rect.bottom + threshold;\n\n      if (threshold && insideHorizontally && insideVertically) {\n        return ret = sortable;\n      }\n    });\n    return ret;\n  },\n      _prepareGroup = function _prepareGroup(options) {\n    function toFn(value, pull) {\n      return function (to, from, dragEl, evt) {\n        var sameGroup = to.options.group.name && from.options.group.name && to.options.group.name === from.options.group.name;\n\n        if (value == null && (pull || sameGroup)) {\n          // Default pull value\n          // Default pull and put value if same group\n          return true;\n        } else if (value == null || value === false) {\n          return false;\n        } else if (pull && value === 'clone') {\n          return value;\n        } else if (typeof value === 'function') {\n          return toFn(value(to, from, dragEl, evt), pull)(to, from, dragEl, evt);\n        } else {\n          var otherGroup = (pull ? to : from).options.group.name;\n          return value === true || typeof value === 'string' && value === otherGroup || value.join && value.indexOf(otherGroup) > -1;\n        }\n      };\n    }\n\n    var group = {};\n    var originalGroup = options.group;\n\n    if (!originalGroup || _typeof(originalGroup) != 'object') {\n      originalGroup = {\n        name: originalGroup\n      };\n    }\n\n    group.name = originalGroup.name;\n    group.checkPull = toFn(originalGroup.pull, true);\n    group.checkPut = toFn(originalGroup.put);\n    group.revertClone = originalGroup.revertClone;\n    options.group = group;\n  },\n      _hideGhostForTarget = function _hideGhostForTarget() {\n    if (!supportCssPointerEvents && ghostEl) {\n      css(ghostEl, 'display', 'none');\n    }\n  },\n      _unhideGhostForTarget = function _unhideGhostForTarget() {\n    if (!supportCssPointerEvents && ghostEl) {\n      css(ghostEl, 'display', '');\n    }\n  }; // #1184 fix - Prevent click event on fallback if dragged but item not changed position\n\n\n  if (documentExists) {\n    document.addEventListener('click', function (evt) {\n      if (ignoreNextClick) {\n        evt.preventDefault();\n        evt.stopPropagation && evt.stopPropagation();\n        evt.stopImmediatePropagation && evt.stopImmediatePropagation();\n        ignoreNextClick = false;\n        return false;\n      }\n    }, true);\n  }\n\n  var nearestEmptyInsertDetectEvent = function nearestEmptyInsertDetectEvent(evt) {\n    if (dragEl) {\n      evt = evt.touches ? evt.touches[0] : evt;\n\n      var nearest = _detectNearestEmptySortable(evt.clientX, evt.clientY);\n\n      if (nearest) {\n        // Create imitation event\n        var event = {};\n\n        for (var i in evt) {\n          if (evt.hasOwnProperty(i)) {\n            event[i] = evt[i];\n          }\n        }\n\n        event.target = event.rootEl = nearest;\n        event.preventDefault = void 0;\n        event.stopPropagation = void 0;\n\n        nearest[expando]._onDragOver(event);\n      }\n    }\n  };\n\n  var _checkOutsideTargetEl = function _checkOutsideTargetEl(evt) {\n    if (dragEl) {\n      dragEl.parentNode[expando]._isOutsideThisEl(evt.target);\n    }\n  };\n  /**\n   * @class  Sortable\n   * @param  {HTMLElement}  el\n   * @param  {Object}       [options]\n   */\n\n\n  function Sortable(el, options) {\n    if (!(el && el.nodeType && el.nodeType === 1)) {\n      throw \"Sortable: `el` must be an HTMLElement, not \".concat({}.toString.call(el));\n    }\n\n    this.el = el; // root element\n\n    this.options = options = _extends({}, options); // Export instance\n\n    el[expando] = this;\n    var defaults = {\n      group: null,\n      sort: true,\n      disabled: false,\n      store: null,\n      handle: null,\n      draggable: /^[uo]l$/i.test(el.nodeName) ? '>li' : '>*',\n      swapThreshold: 1,\n      // percentage; 0 <= x <= 1\n      invertSwap: false,\n      // invert always\n      invertedSwapThreshold: null,\n      // will be set to same as swapThreshold if default\n      removeCloneOnHide: true,\n      direction: function direction() {\n        return _detectDirection(el, this.options);\n      },\n      ghostClass: 'sortable-ghost',\n      chosenClass: 'sortable-chosen',\n      dragClass: 'sortable-drag',\n      ignore: 'a, img',\n      filter: null,\n      preventOnFilter: true,\n      animation: 0,\n      easing: null,\n      setData: function setData(dataTransfer, dragEl) {\n        dataTransfer.setData('Text', dragEl.textContent);\n      },\n      dropBubble: false,\n      dragoverBubble: false,\n      dataIdAttr: 'data-id',\n      delay: 0,\n      delayOnTouchOnly: false,\n      touchStartThreshold: (Number.parseInt ? Number : window).parseInt(window.devicePixelRatio, 10) || 1,\n      forceFallback: false,\n      fallbackClass: 'sortable-fallback',\n      fallbackOnBody: false,\n      fallbackTolerance: 0,\n      fallbackOffset: {\n        x: 0,\n        y: 0\n      },\n      supportPointer: Sortable.supportPointer !== false && 'PointerEvent' in window,\n      emptyInsertThreshold: 5\n    };\n    PluginManager.initializePlugins(this, el, defaults); // Set default options\n\n    for (var name in defaults) {\n      !(name in options) && (options[name] = defaults[name]);\n    }\n\n    _prepareGroup(options); // Bind all private methods\n\n\n    for (var fn in this) {\n      if (fn.charAt(0) === '_' && typeof this[fn] === 'function') {\n        this[fn] = this[fn].bind(this);\n      }\n    } // Setup drag mode\n\n\n    this.nativeDraggable = options.forceFallback ? false : supportDraggable;\n\n    if (this.nativeDraggable) {\n      // Touch start threshold cannot be greater than the native dragstart threshold\n      this.options.touchStartThreshold = 1;\n    } // Bind events\n\n\n    if (options.supportPointer) {\n      on(el, 'pointerdown', this._onTapStart);\n    } else {\n      on(el, 'mousedown', this._onTapStart);\n      on(el, 'touchstart', this._onTapStart);\n    }\n\n    if (this.nativeDraggable) {\n      on(el, 'dragover', this);\n      on(el, 'dragenter', this);\n    }\n\n    sortables.push(this.el); // Restore sorting\n\n    options.store && options.store.get && this.sort(options.store.get(this) || []); // Add animation state manager\n\n    _extends(this, AnimationStateManager());\n  }\n\n  Sortable.prototype =\n  /** @lends Sortable.prototype */\n  {\n    constructor: Sortable,\n    _isOutsideThisEl: function _isOutsideThisEl(target) {\n      if (!this.el.contains(target) && target !== this.el) {\n        lastTarget = null;\n      }\n    },\n    _getDirection: function _getDirection(evt, target) {\n      return typeof this.options.direction === 'function' ? this.options.direction.call(this, evt, target, dragEl) : this.options.direction;\n    },\n    _onTapStart: function _onTapStart(\n    /** Event|TouchEvent */\n    evt) {\n      if (!evt.cancelable) return;\n\n      var _this = this,\n          el = this.el,\n          options = this.options,\n          preventOnFilter = options.preventOnFilter,\n          type = evt.type,\n          touch = evt.touches && evt.touches[0] || evt.pointerType && evt.pointerType === 'touch' && evt,\n          target = (touch || evt).target,\n          originalTarget = evt.target.shadowRoot && (evt.path && evt.path[0] || evt.composedPath && evt.composedPath()[0]) || target,\n          filter = options.filter;\n\n      _saveInputCheckedState(el); // Don't trigger start event when an element is been dragged, otherwise the evt.oldindex always wrong when set option.group.\n\n\n      if (dragEl) {\n        return;\n      }\n\n      if (/mousedown|pointerdown/.test(type) && evt.button !== 0 || options.disabled) {\n        return; // only left button and enabled\n      } // cancel dnd if original target is content editable\n\n\n      if (originalTarget.isContentEditable) {\n        return;\n      }\n\n      target = closest(target, options.draggable, el, false);\n\n      if (target && target.animated) {\n        return;\n      }\n\n      if (lastDownEl === target) {\n        // Ignoring duplicate `down`\n        return;\n      } // Get the index of the dragged element within its parent\n\n\n      oldIndex = index(target);\n      oldDraggableIndex = index(target, options.draggable); // Check filter\n\n      if (typeof filter === 'function') {\n        if (filter.call(this, evt, target, this)) {\n          _dispatchEvent({\n            sortable: _this,\n            rootEl: originalTarget,\n            name: 'filter',\n            targetEl: target,\n            toEl: el,\n            fromEl: el\n          });\n\n          pluginEvent('filter', _this, {\n            evt: evt\n          });\n          preventOnFilter && evt.cancelable && evt.preventDefault();\n          return; // cancel dnd\n        }\n      } else if (filter) {\n        filter = filter.split(',').some(function (criteria) {\n          criteria = closest(originalTarget, criteria.trim(), el, false);\n\n          if (criteria) {\n            _dispatchEvent({\n              sortable: _this,\n              rootEl: criteria,\n              name: 'filter',\n              targetEl: target,\n              fromEl: el,\n              toEl: el\n            });\n\n            pluginEvent('filter', _this, {\n              evt: evt\n            });\n            return true;\n          }\n        });\n\n        if (filter) {\n          preventOnFilter && evt.cancelable && evt.preventDefault();\n          return; // cancel dnd\n        }\n      }\n\n      if (options.handle && !closest(originalTarget, options.handle, el, false)) {\n        return;\n      } // Prepare `dragstart`\n\n\n      this._prepareDragStart(evt, touch, target);\n    },\n    _prepareDragStart: function _prepareDragStart(\n    /** Event */\n    evt,\n    /** Touch */\n    touch,\n    /** HTMLElement */\n    target) {\n      var _this = this,\n          el = _this.el,\n          options = _this.options,\n          ownerDocument = el.ownerDocument,\n          dragStartFn;\n\n      if (target && !dragEl && target.parentNode === el) {\n        var dragRect = getRect(target);\n        rootEl = el;\n        dragEl = target;\n        parentEl = dragEl.parentNode;\n        nextEl = dragEl.nextSibling;\n        lastDownEl = target;\n        activeGroup = options.group;\n        Sortable.dragged = dragEl;\n        tapEvt = {\n          target: dragEl,\n          clientX: (touch || evt).clientX,\n          clientY: (touch || evt).clientY\n        };\n        tapDistanceLeft = tapEvt.clientX - dragRect.left;\n        tapDistanceTop = tapEvt.clientY - dragRect.top;\n        this._lastX = (touch || evt).clientX;\n        this._lastY = (touch || evt).clientY;\n        dragEl.style['will-change'] = 'all';\n\n        dragStartFn = function dragStartFn() {\n          pluginEvent('delayEnded', _this, {\n            evt: evt\n          });\n\n          if (Sortable.eventCanceled) {\n            _this._onDrop();\n\n            return;\n          } // Delayed drag has been triggered\n          // we can re-enable the events: touchmove/mousemove\n\n\n          _this._disableDelayedDragEvents();\n\n          if (!FireFox && _this.nativeDraggable) {\n            dragEl.draggable = true;\n          } // Bind the events: dragstart/dragend\n\n\n          _this._triggerDragStart(evt, touch); // Drag start event\n\n\n          _dispatchEvent({\n            sortable: _this,\n            name: 'choose',\n            originalEvent: evt\n          }); // Chosen item\n\n\n          toggleClass(dragEl, options.chosenClass, true);\n        }; // Disable \"draggable\"\n\n\n        options.ignore.split(',').forEach(function (criteria) {\n          find(dragEl, criteria.trim(), _disableDraggable);\n        });\n        on(ownerDocument, 'dragover', nearestEmptyInsertDetectEvent);\n        on(ownerDocument, 'mousemove', nearestEmptyInsertDetectEvent);\n        on(ownerDocument, 'touchmove', nearestEmptyInsertDetectEvent);\n        on(ownerDocument, 'mouseup', _this._onDrop);\n        on(ownerDocument, 'touchend', _this._onDrop);\n        on(ownerDocument, 'touchcancel', _this._onDrop); // Make dragEl draggable (must be before delay for FireFox)\n\n        if (FireFox && this.nativeDraggable) {\n          this.options.touchStartThreshold = 4;\n          dragEl.draggable = true;\n        }\n\n        pluginEvent('delayStart', this, {\n          evt: evt\n        }); // Delay is impossible for native DnD in Edge or IE\n\n        if (options.delay && (!options.delayOnTouchOnly || touch) && (!this.nativeDraggable || !(Edge || IE11OrLess))) {\n          if (Sortable.eventCanceled) {\n            this._onDrop();\n\n            return;\n          } // If the user moves the pointer or let go the click or touch\n          // before the delay has been reached:\n          // disable the delayed drag\n\n\n          on(ownerDocument, 'mouseup', _this._disableDelayedDrag);\n          on(ownerDocument, 'touchend', _this._disableDelayedDrag);\n          on(ownerDocument, 'touchcancel', _this._disableDelayedDrag);\n          on(ownerDocument, 'mousemove', _this._delayedDragTouchMoveHandler);\n          on(ownerDocument, 'touchmove', _this._delayedDragTouchMoveHandler);\n          options.supportPointer && on(ownerDocument, 'pointermove', _this._delayedDragTouchMoveHandler);\n          _this._dragStartTimer = setTimeout(dragStartFn, options.delay);\n        } else {\n          dragStartFn();\n        }\n      }\n    },\n    _delayedDragTouchMoveHandler: function _delayedDragTouchMoveHandler(\n    /** TouchEvent|PointerEvent **/\n    e) {\n      var touch = e.touches ? e.touches[0] : e;\n\n      if (Math.max(Math.abs(touch.clientX - this._lastX), Math.abs(touch.clientY - this._lastY)) >= Math.floor(this.options.touchStartThreshold / (this.nativeDraggable && window.devicePixelRatio || 1))) {\n        this._disableDelayedDrag();\n      }\n    },\n    _disableDelayedDrag: function _disableDelayedDrag() {\n      dragEl && _disableDraggable(dragEl);\n      clearTimeout(this._dragStartTimer);\n\n      this._disableDelayedDragEvents();\n    },\n    _disableDelayedDragEvents: function _disableDelayedDragEvents() {\n      var ownerDocument = this.el.ownerDocument;\n      off(ownerDocument, 'mouseup', this._disableDelayedDrag);\n      off(ownerDocument, 'touchend', this._disableDelayedDrag);\n      off(ownerDocument, 'touchcancel', this._disableDelayedDrag);\n      off(ownerDocument, 'mousemove', this._delayedDragTouchMoveHandler);\n      off(ownerDocument, 'touchmove', this._delayedDragTouchMoveHandler);\n      off(ownerDocument, 'pointermove', this._delayedDragTouchMoveHandler);\n    },\n    _triggerDragStart: function _triggerDragStart(\n    /** Event */\n    evt,\n    /** Touch */\n    touch) {\n      touch = touch || evt.pointerType == 'touch' && evt;\n\n      if (!this.nativeDraggable || touch) {\n        if (this.options.supportPointer) {\n          on(document, 'pointermove', this._onTouchMove);\n        } else if (touch) {\n          on(document, 'touchmove', this._onTouchMove);\n        } else {\n          on(document, 'mousemove', this._onTouchMove);\n        }\n      } else {\n        on(dragEl, 'dragend', this);\n        on(rootEl, 'dragstart', this._onDragStart);\n      }\n\n      try {\n        if (document.selection) {\n          // Timeout neccessary for IE9\n          _nextTick(function () {\n            document.selection.empty();\n          });\n        } else {\n          window.getSelection().removeAllRanges();\n        }\n      } catch (err) {}\n    },\n    _dragStarted: function _dragStarted(fallback, evt) {\n\n      awaitingDragStarted = false;\n\n      if (rootEl && dragEl) {\n        pluginEvent('dragStarted', this, {\n          evt: evt\n        });\n\n        if (this.nativeDraggable) {\n          on(document, 'dragover', _checkOutsideTargetEl);\n        }\n\n        var options = this.options; // Apply effect\n\n        !fallback && toggleClass(dragEl, options.dragClass, false);\n        toggleClass(dragEl, options.ghostClass, true);\n        Sortable.active = this;\n        fallback && this._appendGhost(); // Drag start event\n\n        _dispatchEvent({\n          sortable: this,\n          name: 'start',\n          originalEvent: evt\n        });\n      } else {\n        this._nulling();\n      }\n    },\n    _emulateDragOver: function _emulateDragOver() {\n      if (touchEvt) {\n        this._lastX = touchEvt.clientX;\n        this._lastY = touchEvt.clientY;\n\n        _hideGhostForTarget();\n\n        var target = document.elementFromPoint(touchEvt.clientX, touchEvt.clientY);\n        var parent = target;\n\n        while (target && target.shadowRoot) {\n          target = target.shadowRoot.elementFromPoint(touchEvt.clientX, touchEvt.clientY);\n          if (target === parent) break;\n          parent = target;\n        }\n\n        dragEl.parentNode[expando]._isOutsideThisEl(target);\n\n        if (parent) {\n          do {\n            if (parent[expando]) {\n              var inserted = void 0;\n              inserted = parent[expando]._onDragOver({\n                clientX: touchEvt.clientX,\n                clientY: touchEvt.clientY,\n                target: target,\n                rootEl: parent\n              });\n\n              if (inserted && !this.options.dragoverBubble) {\n                break;\n              }\n            }\n\n            target = parent; // store last element\n          }\n          /* jshint boss:true */\n          while (parent = parent.parentNode);\n        }\n\n        _unhideGhostForTarget();\n      }\n    },\n    _onTouchMove: function _onTouchMove(\n    /**TouchEvent*/\n    evt) {\n      if (tapEvt) {\n        var options = this.options,\n            fallbackTolerance = options.fallbackTolerance,\n            fallbackOffset = options.fallbackOffset,\n            touch = evt.touches ? evt.touches[0] : evt,\n            ghostMatrix = ghostEl && matrix(ghostEl, true),\n            scaleX = ghostEl && ghostMatrix && ghostMatrix.a,\n            scaleY = ghostEl && ghostMatrix && ghostMatrix.d,\n            relativeScrollOffset = PositionGhostAbsolutely && ghostRelativeParent && getRelativeScrollOffset(ghostRelativeParent),\n            dx = (touch.clientX - tapEvt.clientX + fallbackOffset.x) / (scaleX || 1) + (relativeScrollOffset ? relativeScrollOffset[0] - ghostRelativeParentInitialScroll[0] : 0) / (scaleX || 1),\n            dy = (touch.clientY - tapEvt.clientY + fallbackOffset.y) / (scaleY || 1) + (relativeScrollOffset ? relativeScrollOffset[1] - ghostRelativeParentInitialScroll[1] : 0) / (scaleY || 1); // only set the status to dragging, when we are actually dragging\n\n        if (!Sortable.active && !awaitingDragStarted) {\n          if (fallbackTolerance && Math.max(Math.abs(touch.clientX - this._lastX), Math.abs(touch.clientY - this._lastY)) < fallbackTolerance) {\n            return;\n          }\n\n          this._onDragStart(evt, true);\n        }\n\n        if (ghostEl) {\n          if (ghostMatrix) {\n            ghostMatrix.e += dx - (lastDx || 0);\n            ghostMatrix.f += dy - (lastDy || 0);\n          } else {\n            ghostMatrix = {\n              a: 1,\n              b: 0,\n              c: 0,\n              d: 1,\n              e: dx,\n              f: dy\n            };\n          }\n\n          var cssMatrix = \"matrix(\".concat(ghostMatrix.a, \",\").concat(ghostMatrix.b, \",\").concat(ghostMatrix.c, \",\").concat(ghostMatrix.d, \",\").concat(ghostMatrix.e, \",\").concat(ghostMatrix.f, \")\");\n          css(ghostEl, 'webkitTransform', cssMatrix);\n          css(ghostEl, 'mozTransform', cssMatrix);\n          css(ghostEl, 'msTransform', cssMatrix);\n          css(ghostEl, 'transform', cssMatrix);\n          lastDx = dx;\n          lastDy = dy;\n          touchEvt = touch;\n        }\n\n        evt.cancelable && evt.preventDefault();\n      }\n    },\n    _appendGhost: function _appendGhost() {\n      // Bug if using scale(): https://stackoverflow.com/questions/2637058\n      // Not being adjusted for\n      if (!ghostEl) {\n        var container = this.options.fallbackOnBody ? document.body : rootEl,\n            rect = getRect(dragEl, true, PositionGhostAbsolutely, true, container),\n            options = this.options; // Position absolutely\n\n        if (PositionGhostAbsolutely) {\n          // Get relatively positioned parent\n          ghostRelativeParent = container;\n\n          while (css(ghostRelativeParent, 'position') === 'static' && css(ghostRelativeParent, 'transform') === 'none' && ghostRelativeParent !== document) {\n            ghostRelativeParent = ghostRelativeParent.parentNode;\n          }\n\n          if (ghostRelativeParent !== document.body && ghostRelativeParent !== document.documentElement) {\n            if (ghostRelativeParent === document) ghostRelativeParent = getWindowScrollingElement();\n            rect.top += ghostRelativeParent.scrollTop;\n            rect.left += ghostRelativeParent.scrollLeft;\n          } else {\n            ghostRelativeParent = getWindowScrollingElement();\n          }\n\n          ghostRelativeParentInitialScroll = getRelativeScrollOffset(ghostRelativeParent);\n        }\n\n        ghostEl = dragEl.cloneNode(true);\n        toggleClass(ghostEl, options.ghostClass, false);\n        toggleClass(ghostEl, options.fallbackClass, true);\n        toggleClass(ghostEl, options.dragClass, true);\n        css(ghostEl, 'transition', '');\n        css(ghostEl, 'transform', '');\n        css(ghostEl, 'box-sizing', 'border-box');\n        css(ghostEl, 'margin', 0);\n        css(ghostEl, 'top', rect.top);\n        css(ghostEl, 'left', rect.left);\n        css(ghostEl, 'width', rect.width);\n        css(ghostEl, 'height', rect.height);\n        css(ghostEl, 'opacity', '0.8');\n        css(ghostEl, 'position', PositionGhostAbsolutely ? 'absolute' : 'fixed');\n        css(ghostEl, 'zIndex', '100000');\n        css(ghostEl, 'pointerEvents', 'none');\n        Sortable.ghost = ghostEl;\n        container.appendChild(ghostEl); // Set transform-origin\n\n        css(ghostEl, 'transform-origin', tapDistanceLeft / parseInt(ghostEl.style.width) * 100 + '% ' + tapDistanceTop / parseInt(ghostEl.style.height) * 100 + '%');\n      }\n    },\n    _onDragStart: function _onDragStart(\n    /**Event*/\n    evt,\n    /**boolean*/\n    fallback) {\n      var _this = this;\n\n      var dataTransfer = evt.dataTransfer;\n      var options = _this.options;\n      pluginEvent('dragStart', this, {\n        evt: evt\n      });\n\n      if (Sortable.eventCanceled) {\n        this._onDrop();\n\n        return;\n      }\n\n      pluginEvent('setupClone', this);\n\n      if (!Sortable.eventCanceled) {\n        cloneEl = clone(dragEl);\n        cloneEl.draggable = false;\n        cloneEl.style['will-change'] = '';\n\n        this._hideClone();\n\n        toggleClass(cloneEl, this.options.chosenClass, false);\n        Sortable.clone = cloneEl;\n      } // #1143: IFrame support workaround\n\n\n      _this.cloneId = _nextTick(function () {\n        pluginEvent('clone', _this);\n        if (Sortable.eventCanceled) return;\n\n        if (!_this.options.removeCloneOnHide) {\n          rootEl.insertBefore(cloneEl, dragEl);\n        }\n\n        _this._hideClone();\n\n        _dispatchEvent({\n          sortable: _this,\n          name: 'clone'\n        });\n      });\n      !fallback && toggleClass(dragEl, options.dragClass, true); // Set proper drop events\n\n      if (fallback) {\n        ignoreNextClick = true;\n        _this._loopId = setInterval(_this._emulateDragOver, 50);\n      } else {\n        // Undo what was set in _prepareDragStart before drag started\n        off(document, 'mouseup', _this._onDrop);\n        off(document, 'touchend', _this._onDrop);\n        off(document, 'touchcancel', _this._onDrop);\n\n        if (dataTransfer) {\n          dataTransfer.effectAllowed = 'move';\n          options.setData && options.setData.call(_this, dataTransfer, dragEl);\n        }\n\n        on(document, 'drop', _this); // #1276 fix:\n\n        css(dragEl, 'transform', 'translateZ(0)');\n      }\n\n      awaitingDragStarted = true;\n      _this._dragStartId = _nextTick(_this._dragStarted.bind(_this, fallback, evt));\n      on(document, 'selectstart', _this);\n      moved = true;\n\n      if (Safari) {\n        css(document.body, 'user-select', 'none');\n      }\n    },\n    // Returns true - if no further action is needed (either inserted or another condition)\n    _onDragOver: function _onDragOver(\n    /**Event*/\n    evt) {\n      var el = this.el,\n          target = evt.target,\n          dragRect,\n          targetRect,\n          revert,\n          options = this.options,\n          group = options.group,\n          activeSortable = Sortable.active,\n          isOwner = activeGroup === group,\n          canSort = options.sort,\n          fromSortable = putSortable || activeSortable,\n          vertical,\n          _this = this,\n          completedFired = false;\n\n      if (_silent) return;\n\n      function dragOverEvent(name, extra) {\n        pluginEvent(name, _this, _objectSpread({\n          evt: evt,\n          isOwner: isOwner,\n          axis: vertical ? 'vertical' : 'horizontal',\n          revert: revert,\n          dragRect: dragRect,\n          targetRect: targetRect,\n          canSort: canSort,\n          fromSortable: fromSortable,\n          target: target,\n          completed: completed,\n          onMove: function onMove(target, after) {\n            return _onMove(rootEl, el, dragEl, dragRect, target, getRect(target), evt, after);\n          },\n          changed: changed\n        }, extra));\n      } // Capture animation state\n\n\n      function capture() {\n        dragOverEvent('dragOverAnimationCapture');\n\n        _this.captureAnimationState();\n\n        if (_this !== fromSortable) {\n          fromSortable.captureAnimationState();\n        }\n      } // Return invocation when dragEl is inserted (or completed)\n\n\n      function completed(insertion) {\n        dragOverEvent('dragOverCompleted', {\n          insertion: insertion\n        });\n\n        if (insertion) {\n          // Clones must be hidden before folding animation to capture dragRectAbsolute properly\n          if (isOwner) {\n            activeSortable._hideClone();\n          } else {\n            activeSortable._showClone(_this);\n          }\n\n          if (_this !== fromSortable) {\n            // Set ghost class to new sortable's ghost class\n            toggleClass(dragEl, putSortable ? putSortable.options.ghostClass : activeSortable.options.ghostClass, false);\n            toggleClass(dragEl, options.ghostClass, true);\n          }\n\n          if (putSortable !== _this && _this !== Sortable.active) {\n            putSortable = _this;\n          } else if (_this === Sortable.active && putSortable) {\n            putSortable = null;\n          } // Animation\n\n\n          if (fromSortable === _this) {\n            _this._ignoreWhileAnimating = target;\n          }\n\n          _this.animateAll(function () {\n            dragOverEvent('dragOverAnimationComplete');\n            _this._ignoreWhileAnimating = null;\n          });\n\n          if (_this !== fromSortable) {\n            fromSortable.animateAll();\n            fromSortable._ignoreWhileAnimating = null;\n          }\n        } // Null lastTarget if it is not inside a previously swapped element\n\n\n        if (target === dragEl && !dragEl.animated || target === el && !target.animated) {\n          lastTarget = null;\n        } // no bubbling and not fallback\n\n\n        if (!options.dragoverBubble && !evt.rootEl && target !== document) {\n          dragEl.parentNode[expando]._isOutsideThisEl(evt.target); // Do not detect for empty insert if already inserted\n\n\n          !insertion && nearestEmptyInsertDetectEvent(evt);\n        }\n\n        !options.dragoverBubble && evt.stopPropagation && evt.stopPropagation();\n        return completedFired = true;\n      } // Call when dragEl has been inserted\n\n\n      function changed() {\n        newIndex = index(dragEl);\n        newDraggableIndex = index(dragEl, options.draggable);\n\n        _dispatchEvent({\n          sortable: _this,\n          name: 'change',\n          toEl: el,\n          newIndex: newIndex,\n          newDraggableIndex: newDraggableIndex,\n          originalEvent: evt\n        });\n      }\n\n      if (evt.preventDefault !== void 0) {\n        evt.cancelable && evt.preventDefault();\n      }\n\n      target = closest(target, options.draggable, el, true);\n      dragOverEvent('dragOver');\n      if (Sortable.eventCanceled) return completedFired;\n\n      if (dragEl.contains(evt.target) || target.animated && target.animatingX && target.animatingY || _this._ignoreWhileAnimating === target) {\n        return completed(false);\n      }\n\n      ignoreNextClick = false;\n\n      if (activeSortable && !options.disabled && (isOwner ? canSort || (revert = !rootEl.contains(dragEl)) // Reverting item into the original list\n      : putSortable === this || (this.lastPutMode = activeGroup.checkPull(this, activeSortable, dragEl, evt)) && group.checkPut(this, activeSortable, dragEl, evt))) {\n        vertical = this._getDirection(evt, target) === 'vertical';\n        dragRect = getRect(dragEl);\n        dragOverEvent('dragOverValid');\n        if (Sortable.eventCanceled) return completedFired;\n\n        if (revert) {\n          parentEl = rootEl; // actualization\n\n          capture();\n\n          this._hideClone();\n\n          dragOverEvent('revert');\n\n          if (!Sortable.eventCanceled) {\n            if (nextEl) {\n              rootEl.insertBefore(dragEl, nextEl);\n            } else {\n              rootEl.appendChild(dragEl);\n            }\n          }\n\n          return completed(true);\n        }\n\n        var elLastChild = lastChild(el, options.draggable);\n\n        if (!elLastChild || _ghostIsLast(evt, vertical, this) && !elLastChild.animated) {\n          // If already at end of list: Do not insert\n          if (elLastChild === dragEl) {\n            return completed(false);\n          } // assign target only if condition is true\n\n\n          if (elLastChild && el === evt.target) {\n            target = elLastChild;\n          }\n\n          if (target) {\n            targetRect = getRect(target);\n          }\n\n          if (_onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, !!target) !== false) {\n            capture();\n            el.appendChild(dragEl);\n            parentEl = el; // actualization\n\n            changed();\n            return completed(true);\n          }\n        } else if (target.parentNode === el) {\n          targetRect = getRect(target);\n          var direction = 0,\n              targetBeforeFirstSwap,\n              differentLevel = dragEl.parentNode !== el,\n              differentRowCol = !_dragElInRowColumn(dragEl.animated && dragEl.toRect || dragRect, target.animated && target.toRect || targetRect, vertical),\n              side1 = vertical ? 'top' : 'left',\n              scrolledPastTop = isScrolledPast(target, 'top', 'top') || isScrolledPast(dragEl, 'top', 'top'),\n              scrollBefore = scrolledPastTop ? scrolledPastTop.scrollTop : void 0;\n\n          if (lastTarget !== target) {\n            targetBeforeFirstSwap = targetRect[side1];\n            pastFirstInvertThresh = false;\n            isCircumstantialInvert = !differentRowCol && options.invertSwap || differentLevel;\n          }\n\n          direction = _getSwapDirection(evt, target, targetRect, vertical, differentRowCol ? 1 : options.swapThreshold, options.invertedSwapThreshold == null ? options.swapThreshold : options.invertedSwapThreshold, isCircumstantialInvert, lastTarget === target);\n          var sibling;\n\n          if (direction !== 0) {\n            // Check if target is beside dragEl in respective direction (ignoring hidden elements)\n            var dragIndex = index(dragEl);\n\n            do {\n              dragIndex -= direction;\n              sibling = parentEl.children[dragIndex];\n            } while (sibling && (css(sibling, 'display') === 'none' || sibling === ghostEl));\n          } // If dragEl is already beside target: Do not insert\n\n\n          if (direction === 0 || sibling === target) {\n            return completed(false);\n          }\n\n          lastTarget = target;\n          lastDirection = direction;\n          var nextSibling = target.nextElementSibling,\n              after = false;\n          after = direction === 1;\n\n          var moveVector = _onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, after);\n\n          if (moveVector !== false) {\n            if (moveVector === 1 || moveVector === -1) {\n              after = moveVector === 1;\n            }\n\n            _silent = true;\n            setTimeout(_unsilent, 30);\n            capture();\n\n            if (after && !nextSibling) {\n              el.appendChild(dragEl);\n            } else {\n              target.parentNode.insertBefore(dragEl, after ? nextSibling : target);\n            } // Undo chrome's scroll adjustment (has no effect on other browsers)\n\n\n            if (scrolledPastTop) {\n              scrollBy(scrolledPastTop, 0, scrollBefore - scrolledPastTop.scrollTop);\n            }\n\n            parentEl = dragEl.parentNode; // actualization\n            // must be done before animation\n\n            if (targetBeforeFirstSwap !== undefined && !isCircumstantialInvert) {\n              targetMoveDistance = Math.abs(targetBeforeFirstSwap - getRect(target)[side1]);\n            }\n\n            changed();\n            return completed(true);\n          }\n        }\n\n        if (el.contains(dragEl)) {\n          return completed(false);\n        }\n      }\n\n      return false;\n    },\n    _ignoreWhileAnimating: null,\n    _offMoveEvents: function _offMoveEvents() {\n      off(document, 'mousemove', this._onTouchMove);\n      off(document, 'touchmove', this._onTouchMove);\n      off(document, 'pointermove', this._onTouchMove);\n      off(document, 'dragover', nearestEmptyInsertDetectEvent);\n      off(document, 'mousemove', nearestEmptyInsertDetectEvent);\n      off(document, 'touchmove', nearestEmptyInsertDetectEvent);\n    },\n    _offUpEvents: function _offUpEvents() {\n      var ownerDocument = this.el.ownerDocument;\n      off(ownerDocument, 'mouseup', this._onDrop);\n      off(ownerDocument, 'touchend', this._onDrop);\n      off(ownerDocument, 'pointerup', this._onDrop);\n      off(ownerDocument, 'touchcancel', this._onDrop);\n      off(document, 'selectstart', this);\n    },\n    _onDrop: function _onDrop(\n    /**Event*/\n    evt) {\n      var el = this.el,\n          options = this.options; // Get the index of the dragged element within its parent\n\n      newIndex = index(dragEl);\n      newDraggableIndex = index(dragEl, options.draggable);\n      pluginEvent('drop', this, {\n        evt: evt\n      });\n      parentEl = dragEl && dragEl.parentNode; // Get again after plugin event\n\n      newIndex = index(dragEl);\n      newDraggableIndex = index(dragEl, options.draggable);\n\n      if (Sortable.eventCanceled) {\n        this._nulling();\n\n        return;\n      }\n\n      awaitingDragStarted = false;\n      isCircumstantialInvert = false;\n      pastFirstInvertThresh = false;\n      clearInterval(this._loopId);\n      clearTimeout(this._dragStartTimer);\n\n      _cancelNextTick(this.cloneId);\n\n      _cancelNextTick(this._dragStartId); // Unbind events\n\n\n      if (this.nativeDraggable) {\n        off(document, 'drop', this);\n        off(el, 'dragstart', this._onDragStart);\n      }\n\n      this._offMoveEvents();\n\n      this._offUpEvents();\n\n      if (Safari) {\n        css(document.body, 'user-select', '');\n      }\n\n      css(dragEl, 'transform', '');\n\n      if (evt) {\n        if (moved) {\n          evt.cancelable && evt.preventDefault();\n          !options.dropBubble && evt.stopPropagation();\n        }\n\n        ghostEl && ghostEl.parentNode && ghostEl.parentNode.removeChild(ghostEl);\n\n        if (rootEl === parentEl || putSortable && putSortable.lastPutMode !== 'clone') {\n          // Remove clone(s)\n          cloneEl && cloneEl.parentNode && cloneEl.parentNode.removeChild(cloneEl);\n        }\n\n        if (dragEl) {\n          if (this.nativeDraggable) {\n            off(dragEl, 'dragend', this);\n          }\n\n          _disableDraggable(dragEl);\n\n          dragEl.style['will-change'] = ''; // Remove classes\n          // ghostClass is added in dragStarted\n\n          if (moved && !awaitingDragStarted) {\n            toggleClass(dragEl, putSortable ? putSortable.options.ghostClass : this.options.ghostClass, false);\n          }\n\n          toggleClass(dragEl, this.options.chosenClass, false); // Drag stop event\n\n          _dispatchEvent({\n            sortable: this,\n            name: 'unchoose',\n            toEl: parentEl,\n            newIndex: null,\n            newDraggableIndex: null,\n            originalEvent: evt\n          });\n\n          if (rootEl !== parentEl) {\n            if (newIndex >= 0) {\n              // Add event\n              _dispatchEvent({\n                rootEl: parentEl,\n                name: 'add',\n                toEl: parentEl,\n                fromEl: rootEl,\n                originalEvent: evt\n              }); // Remove event\n\n\n              _dispatchEvent({\n                sortable: this,\n                name: 'remove',\n                toEl: parentEl,\n                originalEvent: evt\n              }); // drag from one list and drop into another\n\n\n              _dispatchEvent({\n                rootEl: parentEl,\n                name: 'sort',\n                toEl: parentEl,\n                fromEl: rootEl,\n                originalEvent: evt\n              });\n\n              _dispatchEvent({\n                sortable: this,\n                name: 'sort',\n                toEl: parentEl,\n                originalEvent: evt\n              });\n            }\n\n            putSortable && putSortable.save();\n          } else {\n            if (newIndex !== oldIndex) {\n              if (newIndex >= 0) {\n                // drag & drop within the same list\n                _dispatchEvent({\n                  sortable: this,\n                  name: 'update',\n                  toEl: parentEl,\n                  originalEvent: evt\n                });\n\n                _dispatchEvent({\n                  sortable: this,\n                  name: 'sort',\n                  toEl: parentEl,\n                  originalEvent: evt\n                });\n              }\n            }\n          }\n\n          if (Sortable.active) {\n            /* jshint eqnull:true */\n            if (newIndex == null || newIndex === -1) {\n              newIndex = oldIndex;\n              newDraggableIndex = oldDraggableIndex;\n            }\n\n            _dispatchEvent({\n              sortable: this,\n              name: 'end',\n              toEl: parentEl,\n              originalEvent: evt\n            }); // Save sorting\n\n\n            this.save();\n          }\n        }\n      }\n\n      this._nulling();\n    },\n    _nulling: function _nulling() {\n      pluginEvent('nulling', this);\n      rootEl = dragEl = parentEl = ghostEl = nextEl = cloneEl = lastDownEl = cloneHidden = tapEvt = touchEvt = moved = newIndex = newDraggableIndex = oldIndex = oldDraggableIndex = lastTarget = lastDirection = putSortable = activeGroup = Sortable.dragged = Sortable.ghost = Sortable.clone = Sortable.active = null;\n      savedInputChecked.forEach(function (el) {\n        el.checked = true;\n      });\n      savedInputChecked.length = lastDx = lastDy = 0;\n    },\n    handleEvent: function handleEvent(\n    /**Event*/\n    evt) {\n      switch (evt.type) {\n        case 'drop':\n        case 'dragend':\n          this._onDrop(evt);\n\n          break;\n\n        case 'dragenter':\n        case 'dragover':\n          if (dragEl) {\n            this._onDragOver(evt);\n\n            _globalDragOver(evt);\n          }\n\n          break;\n\n        case 'selectstart':\n          evt.preventDefault();\n          break;\n      }\n    },\n\n    /**\n     * Serializes the item into an array of string.\n     * @returns {String[]}\n     */\n    toArray: function toArray() {\n      var order = [],\n          el,\n          children = this.el.children,\n          i = 0,\n          n = children.length,\n          options = this.options;\n\n      for (; i < n; i++) {\n        el = children[i];\n\n        if (closest(el, options.draggable, this.el, false)) {\n          order.push(el.getAttribute(options.dataIdAttr) || _generateId(el));\n        }\n      }\n\n      return order;\n    },\n\n    /**\n     * Sorts the elements according to the array.\n     * @param  {String[]}  order  order of the items\n     */\n    sort: function sort(order) {\n      var items = {},\n          rootEl = this.el;\n      this.toArray().forEach(function (id, i) {\n        var el = rootEl.children[i];\n\n        if (closest(el, this.options.draggable, rootEl, false)) {\n          items[id] = el;\n        }\n      }, this);\n      order.forEach(function (id) {\n        if (items[id]) {\n          rootEl.removeChild(items[id]);\n          rootEl.appendChild(items[id]);\n        }\n      });\n    },\n\n    /**\n     * Save the current sorting\n     */\n    save: function save() {\n      var store = this.options.store;\n      store && store.set && store.set(this);\n    },\n\n    /**\n     * For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.\n     * @param   {HTMLElement}  el\n     * @param   {String}       [selector]  default: `options.draggable`\n     * @returns {HTMLElement|null}\n     */\n    closest: function closest$1(el, selector) {\n      return closest(el, selector || this.options.draggable, this.el, false);\n    },\n\n    /**\n     * Set/get option\n     * @param   {string} name\n     * @param   {*}      [value]\n     * @returns {*}\n     */\n    option: function option(name, value) {\n      var options = this.options;\n\n      if (value === void 0) {\n        return options[name];\n      } else {\n        var modifiedValue = PluginManager.modifyOption(this, name, value);\n\n        if (typeof modifiedValue !== 'undefined') {\n          options[name] = modifiedValue;\n        } else {\n          options[name] = value;\n        }\n\n        if (name === 'group') {\n          _prepareGroup(options);\n        }\n      }\n    },\n\n    /**\n     * Destroy\n     */\n    destroy: function destroy() {\n      pluginEvent('destroy', this);\n      var el = this.el;\n      el[expando] = null;\n      off(el, 'mousedown', this._onTapStart);\n      off(el, 'touchstart', this._onTapStart);\n      off(el, 'pointerdown', this._onTapStart);\n\n      if (this.nativeDraggable) {\n        off(el, 'dragover', this);\n        off(el, 'dragenter', this);\n      } // Remove draggable attributes\n\n\n      Array.prototype.forEach.call(el.querySelectorAll('[draggable]'), function (el) {\n        el.removeAttribute('draggable');\n      });\n\n      this._onDrop();\n\n      this._disableDelayedDragEvents();\n\n      sortables.splice(sortables.indexOf(this.el), 1);\n      this.el = el = null;\n    },\n    _hideClone: function _hideClone() {\n      if (!cloneHidden) {\n        pluginEvent('hideClone', this);\n        if (Sortable.eventCanceled) return;\n        css(cloneEl, 'display', 'none');\n\n        if (this.options.removeCloneOnHide && cloneEl.parentNode) {\n          cloneEl.parentNode.removeChild(cloneEl);\n        }\n\n        cloneHidden = true;\n      }\n    },\n    _showClone: function _showClone(putSortable) {\n      if (putSortable.lastPutMode !== 'clone') {\n        this._hideClone();\n\n        return;\n      }\n\n      if (cloneHidden) {\n        pluginEvent('showClone', this);\n        if (Sortable.eventCanceled) return; // show clone at dragEl or original position\n\n        if (rootEl.contains(dragEl) && !this.options.group.revertClone) {\n          rootEl.insertBefore(cloneEl, dragEl);\n        } else if (nextEl) {\n          rootEl.insertBefore(cloneEl, nextEl);\n        } else {\n          rootEl.appendChild(cloneEl);\n        }\n\n        if (this.options.group.revertClone) {\n          this.animate(dragEl, cloneEl);\n        }\n\n        css(cloneEl, 'display', '');\n        cloneHidden = false;\n      }\n    }\n  };\n\n  function _globalDragOver(\n  /**Event*/\n  evt) {\n    if (evt.dataTransfer) {\n      evt.dataTransfer.dropEffect = 'move';\n    }\n\n    evt.cancelable && evt.preventDefault();\n  }\n\n  function _onMove(fromEl, toEl, dragEl, dragRect, targetEl, targetRect, originalEvent, willInsertAfter) {\n    var evt,\n        sortable = fromEl[expando],\n        onMoveFn = sortable.options.onMove,\n        retVal; // Support for new CustomEvent feature\n\n    if (window.CustomEvent && !IE11OrLess && !Edge) {\n      evt = new CustomEvent('move', {\n        bubbles: true,\n        cancelable: true\n      });\n    } else {\n      evt = document.createEvent('Event');\n      evt.initEvent('move', true, true);\n    }\n\n    evt.to = toEl;\n    evt.from = fromEl;\n    evt.dragged = dragEl;\n    evt.draggedRect = dragRect;\n    evt.related = targetEl || toEl;\n    evt.relatedRect = targetRect || getRect(toEl);\n    evt.willInsertAfter = willInsertAfter;\n    evt.originalEvent = originalEvent;\n    fromEl.dispatchEvent(evt);\n\n    if (onMoveFn) {\n      retVal = onMoveFn.call(sortable, evt, originalEvent);\n    }\n\n    return retVal;\n  }\n\n  function _disableDraggable(el) {\n    el.draggable = false;\n  }\n\n  function _unsilent() {\n    _silent = false;\n  }\n\n  function _ghostIsLast(evt, vertical, sortable) {\n    var rect = getRect(lastChild(sortable.el, sortable.options.draggable));\n    var spacer = 10;\n    return vertical ? evt.clientX > rect.right + spacer || evt.clientX <= rect.right && evt.clientY > rect.bottom && evt.clientX >= rect.left : evt.clientX > rect.right && evt.clientY > rect.top || evt.clientX <= rect.right && evt.clientY > rect.bottom + spacer;\n  }\n\n  function _getSwapDirection(evt, target, targetRect, vertical, swapThreshold, invertedSwapThreshold, invertSwap, isLastTarget) {\n    var mouseOnAxis = vertical ? evt.clientY : evt.clientX,\n        targetLength = vertical ? targetRect.height : targetRect.width,\n        targetS1 = vertical ? targetRect.top : targetRect.left,\n        targetS2 = vertical ? targetRect.bottom : targetRect.right,\n        invert = false;\n\n    if (!invertSwap) {\n      // Never invert or create dragEl shadow when target movemenet causes mouse to move past the end of regular swapThreshold\n      if (isLastTarget && targetMoveDistance < targetLength * swapThreshold) {\n        // multiplied only by swapThreshold because mouse will already be inside target by (1 - threshold) * targetLength / 2\n        // check if past first invert threshold on side opposite of lastDirection\n        if (!pastFirstInvertThresh && (lastDirection === 1 ? mouseOnAxis > targetS1 + targetLength * invertedSwapThreshold / 2 : mouseOnAxis < targetS2 - targetLength * invertedSwapThreshold / 2)) {\n          // past first invert threshold, do not restrict inverted threshold to dragEl shadow\n          pastFirstInvertThresh = true;\n        }\n\n        if (!pastFirstInvertThresh) {\n          // dragEl shadow (target move distance shadow)\n          if (lastDirection === 1 ? mouseOnAxis < targetS1 + targetMoveDistance // over dragEl shadow\n          : mouseOnAxis > targetS2 - targetMoveDistance) {\n            return -lastDirection;\n          }\n        } else {\n          invert = true;\n        }\n      } else {\n        // Regular\n        if (mouseOnAxis > targetS1 + targetLength * (1 - swapThreshold) / 2 && mouseOnAxis < targetS2 - targetLength * (1 - swapThreshold) / 2) {\n          return _getInsertDirection(target);\n        }\n      }\n    }\n\n    invert = invert || invertSwap;\n\n    if (invert) {\n      // Invert of regular\n      if (mouseOnAxis < targetS1 + targetLength * invertedSwapThreshold / 2 || mouseOnAxis > targetS2 - targetLength * invertedSwapThreshold / 2) {\n        return mouseOnAxis > targetS1 + targetLength / 2 ? 1 : -1;\n      }\n    }\n\n    return 0;\n  }\n  /**\n   * Gets the direction dragEl must be swapped relative to target in order to make it\n   * seem that dragEl has been \"inserted\" into that element's position\n   * @param  {HTMLElement} target       The target whose position dragEl is being inserted at\n   * @return {Number}                   Direction dragEl must be swapped\n   */\n\n\n  function _getInsertDirection(target) {\n    if (index(dragEl) < index(target)) {\n      return 1;\n    } else {\n      return -1;\n    }\n  }\n  /**\n   * Generate id\n   * @param   {HTMLElement} el\n   * @returns {String}\n   * @private\n   */\n\n\n  function _generateId(el) {\n    var str = el.tagName + el.className + el.src + el.href + el.textContent,\n        i = str.length,\n        sum = 0;\n\n    while (i--) {\n      sum += str.charCodeAt(i);\n    }\n\n    return sum.toString(36);\n  }\n\n  function _saveInputCheckedState(root) {\n    savedInputChecked.length = 0;\n    var inputs = root.getElementsByTagName('input');\n    var idx = inputs.length;\n\n    while (idx--) {\n      var el = inputs[idx];\n      el.checked && savedInputChecked.push(el);\n    }\n  }\n\n  function _nextTick(fn) {\n    return setTimeout(fn, 0);\n  }\n\n  function _cancelNextTick(id) {\n    return clearTimeout(id);\n  } // Fixed #973:\n\n\n  if (documentExists) {\n    on(document, 'touchmove', function (evt) {\n      if ((Sortable.active || awaitingDragStarted) && evt.cancelable) {\n        evt.preventDefault();\n      }\n    });\n  } // Export utils\n\n\n  Sortable.utils = {\n    on: on,\n    off: off,\n    css: css,\n    find: find,\n    is: function is(el, selector) {\n      return !!closest(el, selector, el, false);\n    },\n    extend: extend,\n    throttle: throttle,\n    closest: closest,\n    toggleClass: toggleClass,\n    clone: clone,\n    index: index,\n    nextTick: _nextTick,\n    cancelNextTick: _cancelNextTick,\n    detectDirection: _detectDirection,\n    getChild: getChild\n  };\n  /**\n   * Get the Sortable instance of an element\n   * @param  {HTMLElement} element The element\n   * @return {Sortable|undefined}         The instance of Sortable\n   */\n\n  Sortable.get = function (element) {\n    return element[expando];\n  };\n  /**\n   * Mount a plugin to Sortable\n   * @param  {...SortablePlugin|SortablePlugin[]} plugins       Plugins being mounted\n   */\n\n\n  Sortable.mount = function () {\n    for (var _len = arguments.length, plugins = new Array(_len), _key = 0; _key < _len; _key++) {\n      plugins[_key] = arguments[_key];\n    }\n\n    if (plugins[0].constructor === Array) plugins = plugins[0];\n    plugins.forEach(function (plugin) {\n      if (!plugin.prototype || !plugin.prototype.constructor) {\n        throw \"Sortable: Mounted plugin must be a constructor function, not \".concat({}.toString.call(plugin));\n      }\n\n      if (plugin.utils) Sortable.utils = _objectSpread({}, Sortable.utils, plugin.utils);\n      PluginManager.mount(plugin);\n    });\n  };\n  /**\n   * Create sortable instance\n   * @param {HTMLElement}  el\n   * @param {Object}      [options]\n   */\n\n\n  Sortable.create = function (el, options) {\n    return new Sortable(el, options);\n  }; // Export\n\n\n  Sortable.version = version;\n\n  var autoScrolls = [],\n      scrollEl,\n      scrollRootEl,\n      scrolling = false,\n      lastAutoScrollX,\n      lastAutoScrollY,\n      touchEvt$1,\n      pointerElemChangedInterval;\n\n  function AutoScrollPlugin() {\n    function AutoScroll() {\n      this.defaults = {\n        scroll: true,\n        scrollSensitivity: 30,\n        scrollSpeed: 10,\n        bubbleScroll: true\n      }; // Bind all private methods\n\n      for (var fn in this) {\n        if (fn.charAt(0) === '_' && typeof this[fn] === 'function') {\n          this[fn] = this[fn].bind(this);\n        }\n      }\n    }\n\n    AutoScroll.prototype = {\n      dragStarted: function dragStarted(_ref) {\n        var originalEvent = _ref.originalEvent;\n\n        if (this.sortable.nativeDraggable) {\n          on(document, 'dragover', this._handleAutoScroll);\n        } else {\n          if (this.options.supportPointer) {\n            on(document, 'pointermove', this._handleFallbackAutoScroll);\n          } else if (originalEvent.touches) {\n            on(document, 'touchmove', this._handleFallbackAutoScroll);\n          } else {\n            on(document, 'mousemove', this._handleFallbackAutoScroll);\n          }\n        }\n      },\n      dragOverCompleted: function dragOverCompleted(_ref2) {\n        var originalEvent = _ref2.originalEvent;\n\n        // For when bubbling is canceled and using fallback (fallback 'touchmove' always reached)\n        if (!this.options.dragOverBubble && !originalEvent.rootEl) {\n          this._handleAutoScroll(originalEvent);\n        }\n      },\n      drop: function drop() {\n        if (this.sortable.nativeDraggable) {\n          off(document, 'dragover', this._handleAutoScroll);\n        } else {\n          off(document, 'pointermove', this._handleFallbackAutoScroll);\n          off(document, 'touchmove', this._handleFallbackAutoScroll);\n          off(document, 'mousemove', this._handleFallbackAutoScroll);\n        }\n\n        clearPointerElemChangedInterval();\n        clearAutoScrolls();\n        cancelThrottle();\n      },\n      nulling: function nulling() {\n        touchEvt$1 = scrollRootEl = scrollEl = scrolling = pointerElemChangedInterval = lastAutoScrollX = lastAutoScrollY = null;\n        autoScrolls.length = 0;\n      },\n      _handleFallbackAutoScroll: function _handleFallbackAutoScroll(evt) {\n        this._handleAutoScroll(evt, true);\n      },\n      _handleAutoScroll: function _handleAutoScroll(evt, fallback) {\n        var _this = this;\n\n        var x = (evt.touches ? evt.touches[0] : evt).clientX,\n            y = (evt.touches ? evt.touches[0] : evt).clientY,\n            elem = document.elementFromPoint(x, y);\n        touchEvt$1 = evt; // IE does not seem to have native autoscroll,\n        // Edge's autoscroll seems too conditional,\n        // MACOS Safari does not have autoscroll,\n        // Firefox and Chrome are good\n\n        if (fallback || Edge || IE11OrLess || Safari) {\n          autoScroll(evt, this.options, elem, fallback); // Listener for pointer element change\n\n          var ogElemScroller = getParentAutoScrollElement(elem, true);\n\n          if (scrolling && (!pointerElemChangedInterval || x !== lastAutoScrollX || y !== lastAutoScrollY)) {\n            pointerElemChangedInterval && clearPointerElemChangedInterval(); // Detect for pointer elem change, emulating native DnD behaviour\n\n            pointerElemChangedInterval = setInterval(function () {\n              var newElem = getParentAutoScrollElement(document.elementFromPoint(x, y), true);\n\n              if (newElem !== ogElemScroller) {\n                ogElemScroller = newElem;\n                clearAutoScrolls();\n              }\n\n              autoScroll(evt, _this.options, newElem, fallback);\n            }, 10);\n            lastAutoScrollX = x;\n            lastAutoScrollY = y;\n          }\n        } else {\n          // if DnD is enabled (and browser has good autoscrolling), first autoscroll will already scroll, so get parent autoscroll of first autoscroll\n          if (!this.options.bubbleScroll || getParentAutoScrollElement(elem, true) === getWindowScrollingElement()) {\n            clearAutoScrolls();\n            return;\n          }\n\n          autoScroll(evt, this.options, getParentAutoScrollElement(elem, false), false);\n        }\n      }\n    };\n    return _extends(AutoScroll, {\n      pluginName: 'scroll',\n      initializeByDefault: true\n    });\n  }\n\n  function clearAutoScrolls() {\n    autoScrolls.forEach(function (autoScroll) {\n      clearInterval(autoScroll.pid);\n    });\n    autoScrolls = [];\n  }\n\n  function clearPointerElemChangedInterval() {\n    clearInterval(pointerElemChangedInterval);\n  }\n\n  var autoScroll = throttle(function (evt, options, rootEl, isFallback) {\n    // Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=505521\n    if (!options.scroll) return;\n    var x = (evt.touches ? evt.touches[0] : evt).clientX,\n        y = (evt.touches ? evt.touches[0] : evt).clientY,\n        sens = options.scrollSensitivity,\n        speed = options.scrollSpeed,\n        winScroller = getWindowScrollingElement();\n    var scrollThisInstance = false,\n        scrollCustomFn; // New scroll root, set scrollEl\n\n    if (scrollRootEl !== rootEl) {\n      scrollRootEl = rootEl;\n      clearAutoScrolls();\n      scrollEl = options.scroll;\n      scrollCustomFn = options.scrollFn;\n\n      if (scrollEl === true) {\n        scrollEl = getParentAutoScrollElement(rootEl, true);\n      }\n    }\n\n    var layersOut = 0;\n    var currentParent = scrollEl;\n\n    do {\n      var el = currentParent,\n          rect = getRect(el),\n          top = rect.top,\n          bottom = rect.bottom,\n          left = rect.left,\n          right = rect.right,\n          width = rect.width,\n          height = rect.height,\n          canScrollX = void 0,\n          canScrollY = void 0,\n          scrollWidth = el.scrollWidth,\n          scrollHeight = el.scrollHeight,\n          elCSS = css(el),\n          scrollPosX = el.scrollLeft,\n          scrollPosY = el.scrollTop;\n\n      if (el === winScroller) {\n        canScrollX = width < scrollWidth && (elCSS.overflowX === 'auto' || elCSS.overflowX === 'scroll' || elCSS.overflowX === 'visible');\n        canScrollY = height < scrollHeight && (elCSS.overflowY === 'auto' || elCSS.overflowY === 'scroll' || elCSS.overflowY === 'visible');\n      } else {\n        canScrollX = width < scrollWidth && (elCSS.overflowX === 'auto' || elCSS.overflowX === 'scroll');\n        canScrollY = height < scrollHeight && (elCSS.overflowY === 'auto' || elCSS.overflowY === 'scroll');\n      }\n\n      var vx = canScrollX && (Math.abs(right - x) <= sens && scrollPosX + width < scrollWidth) - (Math.abs(left - x) <= sens && !!scrollPosX);\n      var vy = canScrollY && (Math.abs(bottom - y) <= sens && scrollPosY + height < scrollHeight) - (Math.abs(top - y) <= sens && !!scrollPosY);\n\n      if (!autoScrolls[layersOut]) {\n        for (var i = 0; i <= layersOut; i++) {\n          if (!autoScrolls[i]) {\n            autoScrolls[i] = {};\n          }\n        }\n      }\n\n      if (autoScrolls[layersOut].vx != vx || autoScrolls[layersOut].vy != vy || autoScrolls[layersOut].el !== el) {\n        autoScrolls[layersOut].el = el;\n        autoScrolls[layersOut].vx = vx;\n        autoScrolls[layersOut].vy = vy;\n        clearInterval(autoScrolls[layersOut].pid);\n\n        if (vx != 0 || vy != 0) {\n          scrollThisInstance = true;\n          /* jshint loopfunc:true */\n\n          autoScrolls[layersOut].pid = setInterval(function () {\n            // emulate drag over during autoscroll (fallback), emulating native DnD behaviour\n            if (isFallback && this.layer === 0) {\n              Sortable.active._onTouchMove(touchEvt$1); // To move ghost if it is positioned absolutely\n\n            }\n\n            var scrollOffsetY = autoScrolls[this.layer].vy ? autoScrolls[this.layer].vy * speed : 0;\n            var scrollOffsetX = autoScrolls[this.layer].vx ? autoScrolls[this.layer].vx * speed : 0;\n\n            if (typeof scrollCustomFn === 'function') {\n              if (scrollCustomFn.call(Sortable.dragged.parentNode[expando], scrollOffsetX, scrollOffsetY, evt, touchEvt$1, autoScrolls[this.layer].el) !== 'continue') {\n                return;\n              }\n            }\n\n            scrollBy(autoScrolls[this.layer].el, scrollOffsetX, scrollOffsetY);\n          }.bind({\n            layer: layersOut\n          }), 24);\n        }\n      }\n\n      layersOut++;\n    } while (options.bubbleScroll && currentParent !== winScroller && (currentParent = getParentAutoScrollElement(currentParent, false)));\n\n    scrolling = scrollThisInstance; // in case another function catches scrolling as false in between when it is not\n  }, 30);\n\n  var drop = function drop(_ref) {\n    var originalEvent = _ref.originalEvent,\n        putSortable = _ref.putSortable,\n        dragEl = _ref.dragEl,\n        activeSortable = _ref.activeSortable,\n        dispatchSortableEvent = _ref.dispatchSortableEvent,\n        hideGhostForTarget = _ref.hideGhostForTarget,\n        unhideGhostForTarget = _ref.unhideGhostForTarget;\n    if (!originalEvent) return;\n    var toSortable = putSortable || activeSortable;\n    hideGhostForTarget();\n    var touch = originalEvent.changedTouches && originalEvent.changedTouches.length ? originalEvent.changedTouches[0] : originalEvent;\n    var target = document.elementFromPoint(touch.clientX, touch.clientY);\n    unhideGhostForTarget();\n\n    if (toSortable && !toSortable.el.contains(target)) {\n      dispatchSortableEvent('spill');\n      this.onSpill({\n        dragEl: dragEl,\n        putSortable: putSortable\n      });\n    }\n  };\n\n  function Revert() {}\n\n  Revert.prototype = {\n    startIndex: null,\n    dragStart: function dragStart(_ref2) {\n      var oldDraggableIndex = _ref2.oldDraggableIndex;\n      this.startIndex = oldDraggableIndex;\n    },\n    onSpill: function onSpill(_ref3) {\n      var dragEl = _ref3.dragEl,\n          putSortable = _ref3.putSortable;\n      this.sortable.captureAnimationState();\n\n      if (putSortable) {\n        putSortable.captureAnimationState();\n      }\n\n      var nextSibling = getChild(this.sortable.el, this.startIndex, this.options);\n\n      if (nextSibling) {\n        this.sortable.el.insertBefore(dragEl, nextSibling);\n      } else {\n        this.sortable.el.appendChild(dragEl);\n      }\n\n      this.sortable.animateAll();\n\n      if (putSortable) {\n        putSortable.animateAll();\n      }\n    },\n    drop: drop\n  };\n\n  _extends(Revert, {\n    pluginName: 'revertOnSpill'\n  });\n\n  function Remove() {}\n\n  Remove.prototype = {\n    onSpill: function onSpill(_ref4) {\n      var dragEl = _ref4.dragEl,\n          putSortable = _ref4.putSortable;\n      var parentSortable = putSortable || this.sortable;\n      parentSortable.captureAnimationState();\n      dragEl.parentNode && dragEl.parentNode.removeChild(dragEl);\n      parentSortable.animateAll();\n    },\n    drop: drop\n  };\n\n  _extends(Remove, {\n    pluginName: 'removeOnSpill'\n  });\n\n  var lastSwapEl;\n\n  function SwapPlugin() {\n    function Swap() {\n      this.defaults = {\n        swapClass: 'sortable-swap-highlight'\n      };\n    }\n\n    Swap.prototype = {\n      dragStart: function dragStart(_ref) {\n        var dragEl = _ref.dragEl;\n        lastSwapEl = dragEl;\n      },\n      dragOverValid: function dragOverValid(_ref2) {\n        var completed = _ref2.completed,\n            target = _ref2.target,\n            onMove = _ref2.onMove,\n            activeSortable = _ref2.activeSortable,\n            changed = _ref2.changed,\n            cancel = _ref2.cancel;\n        if (!activeSortable.options.swap) return;\n        var el = this.sortable.el,\n            options = this.options;\n\n        if (target && target !== el) {\n          var prevSwapEl = lastSwapEl;\n\n          if (onMove(target) !== false) {\n            toggleClass(target, options.swapClass, true);\n            lastSwapEl = target;\n          } else {\n            lastSwapEl = null;\n          }\n\n          if (prevSwapEl && prevSwapEl !== lastSwapEl) {\n            toggleClass(prevSwapEl, options.swapClass, false);\n          }\n        }\n\n        changed();\n        completed(true);\n        cancel();\n      },\n      drop: function drop(_ref3) {\n        var activeSortable = _ref3.activeSortable,\n            putSortable = _ref3.putSortable,\n            dragEl = _ref3.dragEl;\n        var toSortable = putSortable || this.sortable;\n        var options = this.options;\n        lastSwapEl && toggleClass(lastSwapEl, options.swapClass, false);\n\n        if (lastSwapEl && (options.swap || putSortable && putSortable.options.swap)) {\n          if (dragEl !== lastSwapEl) {\n            toSortable.captureAnimationState();\n            if (toSortable !== activeSortable) activeSortable.captureAnimationState();\n            swapNodes(dragEl, lastSwapEl);\n            toSortable.animateAll();\n            if (toSortable !== activeSortable) activeSortable.animateAll();\n          }\n        }\n      },\n      nulling: function nulling() {\n        lastSwapEl = null;\n      }\n    };\n    return _extends(Swap, {\n      pluginName: 'swap',\n      eventProperties: function eventProperties() {\n        return {\n          swapItem: lastSwapEl\n        };\n      }\n    });\n  }\n\n  function swapNodes(n1, n2) {\n    var p1 = n1.parentNode,\n        p2 = n2.parentNode,\n        i1,\n        i2;\n    if (!p1 || !p2 || p1.isEqualNode(n2) || p2.isEqualNode(n1)) return;\n    i1 = index(n1);\n    i2 = index(n2);\n\n    if (p1.isEqualNode(p2) && i1 < i2) {\n      i2++;\n    }\n\n    p1.insertBefore(n2, p1.children[i1]);\n    p2.insertBefore(n1, p2.children[i2]);\n  }\n\n  var multiDragElements = [],\n      multiDragClones = [],\n      lastMultiDragSelect,\n      // for selection with modifier key down (SHIFT)\n  multiDragSortable,\n      initialFolding = false,\n      // Initial multi-drag fold when drag started\n  folding = false,\n      // Folding any other time\n  dragStarted = false,\n      dragEl$1,\n      clonesFromRect,\n      clonesHidden;\n\n  function MultiDragPlugin() {\n    function MultiDrag(sortable) {\n      // Bind all private methods\n      for (var fn in this) {\n        if (fn.charAt(0) === '_' && typeof this[fn] === 'function') {\n          this[fn] = this[fn].bind(this);\n        }\n      }\n\n      if (sortable.options.supportPointer) {\n        on(document, 'pointerup', this._deselectMultiDrag);\n      } else {\n        on(document, 'mouseup', this._deselectMultiDrag);\n        on(document, 'touchend', this._deselectMultiDrag);\n      }\n\n      on(document, 'keydown', this._checkKeyDown);\n      on(document, 'keyup', this._checkKeyUp);\n      this.defaults = {\n        selectedClass: 'sortable-selected',\n        multiDragKey: null,\n        setData: function setData(dataTransfer, dragEl) {\n          var data = '';\n\n          if (multiDragElements.length && multiDragSortable === sortable) {\n            multiDragElements.forEach(function (multiDragElement, i) {\n              data += (!i ? '' : ', ') + multiDragElement.textContent;\n            });\n          } else {\n            data = dragEl.textContent;\n          }\n\n          dataTransfer.setData('Text', data);\n        }\n      };\n    }\n\n    MultiDrag.prototype = {\n      multiDragKeyDown: false,\n      isMultiDrag: false,\n      delayStartGlobal: function delayStartGlobal(_ref) {\n        var dragged = _ref.dragEl;\n        dragEl$1 = dragged;\n      },\n      delayEnded: function delayEnded() {\n        this.isMultiDrag = ~multiDragElements.indexOf(dragEl$1);\n      },\n      setupClone: function setupClone(_ref2) {\n        var sortable = _ref2.sortable,\n            cancel = _ref2.cancel;\n        if (!this.isMultiDrag) return;\n\n        for (var i = 0; i < multiDragElements.length; i++) {\n          multiDragClones.push(clone(multiDragElements[i]));\n          multiDragClones[i].sortableIndex = multiDragElements[i].sortableIndex;\n          multiDragClones[i].draggable = false;\n          multiDragClones[i].style['will-change'] = '';\n          toggleClass(multiDragClones[i], this.options.selectedClass, false);\n          multiDragElements[i] === dragEl$1 && toggleClass(multiDragClones[i], this.options.chosenClass, false);\n        }\n\n        sortable._hideClone();\n\n        cancel();\n      },\n      clone: function clone(_ref3) {\n        var sortable = _ref3.sortable,\n            rootEl = _ref3.rootEl,\n            dispatchSortableEvent = _ref3.dispatchSortableEvent,\n            cancel = _ref3.cancel;\n        if (!this.isMultiDrag) return;\n\n        if (!this.options.removeCloneOnHide) {\n          if (multiDragElements.length && multiDragSortable === sortable) {\n            insertMultiDragClones(true, rootEl);\n            dispatchSortableEvent('clone');\n            cancel();\n          }\n        }\n      },\n      showClone: function showClone(_ref4) {\n        var cloneNowShown = _ref4.cloneNowShown,\n            rootEl = _ref4.rootEl,\n            cancel = _ref4.cancel;\n        if (!this.isMultiDrag) return;\n        insertMultiDragClones(false, rootEl);\n        multiDragClones.forEach(function (clone) {\n          css(clone, 'display', '');\n        });\n        cloneNowShown();\n        clonesHidden = false;\n        cancel();\n      },\n      hideClone: function hideClone(_ref5) {\n        var _this = this;\n\n        var sortable = _ref5.sortable,\n            cloneNowHidden = _ref5.cloneNowHidden,\n            cancel = _ref5.cancel;\n        if (!this.isMultiDrag) return;\n        multiDragClones.forEach(function (clone) {\n          css(clone, 'display', 'none');\n\n          if (_this.options.removeCloneOnHide && clone.parentNode) {\n            clone.parentNode.removeChild(clone);\n          }\n        });\n        cloneNowHidden();\n        clonesHidden = true;\n        cancel();\n      },\n      dragStartGlobal: function dragStartGlobal(_ref6) {\n        var sortable = _ref6.sortable;\n\n        if (!this.isMultiDrag && multiDragSortable) {\n          multiDragSortable.multiDrag._deselectMultiDrag();\n        }\n\n        multiDragElements.forEach(function (multiDragElement) {\n          multiDragElement.sortableIndex = index(multiDragElement);\n        }); // Sort multi-drag elements\n\n        multiDragElements = multiDragElements.sort(function (a, b) {\n          return a.sortableIndex - b.sortableIndex;\n        });\n        dragStarted = true;\n      },\n      dragStarted: function dragStarted(_ref7) {\n        var _this2 = this;\n\n        var sortable = _ref7.sortable;\n        if (!this.isMultiDrag) return;\n\n        if (this.options.sort) {\n          // Capture rects,\n          // hide multi drag elements (by positioning them absolute),\n          // set multi drag elements rects to dragRect,\n          // show multi drag elements,\n          // animate to rects,\n          // unset rects & remove from DOM\n          sortable.captureAnimationState();\n\n          if (this.options.animation) {\n            multiDragElements.forEach(function (multiDragElement) {\n              if (multiDragElement === dragEl$1) return;\n              css(multiDragElement, 'position', 'absolute');\n            });\n            var dragRect = getRect(dragEl$1, false, true, true);\n            multiDragElements.forEach(function (multiDragElement) {\n              if (multiDragElement === dragEl$1) return;\n              setRect(multiDragElement, dragRect);\n            });\n            folding = true;\n            initialFolding = true;\n          }\n        }\n\n        sortable.animateAll(function () {\n          folding = false;\n          initialFolding = false;\n\n          if (_this2.options.animation) {\n            multiDragElements.forEach(function (multiDragElement) {\n              unsetRect(multiDragElement);\n            });\n          } // Remove all auxiliary multidrag items from el, if sorting enabled\n\n\n          if (_this2.options.sort) {\n            removeMultiDragElements();\n          }\n        });\n      },\n      dragOver: function dragOver(_ref8) {\n        var target = _ref8.target,\n            completed = _ref8.completed,\n            cancel = _ref8.cancel;\n\n        if (folding && ~multiDragElements.indexOf(target)) {\n          completed(false);\n          cancel();\n        }\n      },\n      revert: function revert(_ref9) {\n        var fromSortable = _ref9.fromSortable,\n            rootEl = _ref9.rootEl,\n            sortable = _ref9.sortable,\n            dragRect = _ref9.dragRect;\n\n        if (multiDragElements.length > 1) {\n          // Setup unfold animation\n          multiDragElements.forEach(function (multiDragElement) {\n            sortable.addAnimationState({\n              target: multiDragElement,\n              rect: folding ? getRect(multiDragElement) : dragRect\n            });\n            unsetRect(multiDragElement);\n            multiDragElement.fromRect = dragRect;\n            fromSortable.removeAnimationState(multiDragElement);\n          });\n          folding = false;\n          insertMultiDragElements(!this.options.removeCloneOnHide, rootEl);\n        }\n      },\n      dragOverCompleted: function dragOverCompleted(_ref10) {\n        var sortable = _ref10.sortable,\n            isOwner = _ref10.isOwner,\n            insertion = _ref10.insertion,\n            activeSortable = _ref10.activeSortable,\n            parentEl = _ref10.parentEl,\n            putSortable = _ref10.putSortable;\n        var options = this.options;\n\n        if (insertion) {\n          // Clones must be hidden before folding animation to capture dragRectAbsolute properly\n          if (isOwner) {\n            activeSortable._hideClone();\n          }\n\n          initialFolding = false; // If leaving sort:false root, or already folding - Fold to new location\n\n          if (options.animation && multiDragElements.length > 1 && (folding || !isOwner && !activeSortable.options.sort && !putSortable)) {\n            // Fold: Set all multi drag elements's rects to dragEl's rect when multi-drag elements are invisible\n            var dragRectAbsolute = getRect(dragEl$1, false, true, true);\n            multiDragElements.forEach(function (multiDragElement) {\n              if (multiDragElement === dragEl$1) return;\n              setRect(multiDragElement, dragRectAbsolute); // Move element(s) to end of parentEl so that it does not interfere with multi-drag clones insertion if they are inserted\n              // while folding, and so that we can capture them again because old sortable will no longer be fromSortable\n\n              parentEl.appendChild(multiDragElement);\n            });\n            folding = true;\n          } // Clones must be shown (and check to remove multi drags) after folding when interfering multiDragElements are moved out\n\n\n          if (!isOwner) {\n            // Only remove if not folding (folding will remove them anyways)\n            if (!folding) {\n              removeMultiDragElements();\n            }\n\n            if (multiDragElements.length > 1) {\n              var clonesHiddenBefore = clonesHidden;\n\n              activeSortable._showClone(sortable); // Unfold animation for clones if showing from hidden\n\n\n              if (activeSortable.options.animation && !clonesHidden && clonesHiddenBefore) {\n                multiDragClones.forEach(function (clone) {\n                  activeSortable.addAnimationState({\n                    target: clone,\n                    rect: clonesFromRect\n                  });\n                  clone.fromRect = clonesFromRect;\n                  clone.thisAnimationDuration = null;\n                });\n              }\n            } else {\n              activeSortable._showClone(sortable);\n            }\n          }\n        }\n      },\n      dragOverAnimationCapture: function dragOverAnimationCapture(_ref11) {\n        var dragRect = _ref11.dragRect,\n            isOwner = _ref11.isOwner,\n            activeSortable = _ref11.activeSortable;\n        multiDragElements.forEach(function (multiDragElement) {\n          multiDragElement.thisAnimationDuration = null;\n        });\n\n        if (activeSortable.options.animation && !isOwner && activeSortable.multiDrag.isMultiDrag) {\n          clonesFromRect = _extends({}, dragRect);\n          var dragMatrix = matrix(dragEl$1, true);\n          clonesFromRect.top -= dragMatrix.f;\n          clonesFromRect.left -= dragMatrix.e;\n        }\n      },\n      dragOverAnimationComplete: function dragOverAnimationComplete() {\n        if (folding) {\n          folding = false;\n          removeMultiDragElements();\n        }\n      },\n      drop: function drop(_ref12) {\n        var evt = _ref12.originalEvent,\n            rootEl = _ref12.rootEl,\n            parentEl = _ref12.parentEl,\n            sortable = _ref12.sortable,\n            dispatchSortableEvent = _ref12.dispatchSortableEvent,\n            oldIndex = _ref12.oldIndex,\n            putSortable = _ref12.putSortable;\n        var toSortable = putSortable || this.sortable;\n        if (!evt) return;\n        var options = this.options,\n            children = parentEl.children; // Multi-drag selection\n\n        if (!dragStarted) {\n          if (options.multiDragKey && !this.multiDragKeyDown) {\n            this._deselectMultiDrag();\n          }\n\n          toggleClass(dragEl$1, options.selectedClass, !~multiDragElements.indexOf(dragEl$1));\n\n          if (!~multiDragElements.indexOf(dragEl$1)) {\n            multiDragElements.push(dragEl$1);\n            dispatchEvent({\n              sortable: sortable,\n              rootEl: rootEl,\n              name: 'select',\n              targetEl: dragEl$1,\n              originalEvt: evt\n            }); // Modifier activated, select from last to dragEl\n\n            if (evt.shiftKey && lastMultiDragSelect && sortable.el.contains(lastMultiDragSelect)) {\n              var lastIndex = index(lastMultiDragSelect),\n                  currentIndex = index(dragEl$1);\n\n              if (~lastIndex && ~currentIndex && lastIndex !== currentIndex) {\n                // Must include lastMultiDragSelect (select it), in case modified selection from no selection\n                // (but previous selection existed)\n                var n, i;\n\n                if (currentIndex > lastIndex) {\n                  i = lastIndex;\n                  n = currentIndex;\n                } else {\n                  i = currentIndex;\n                  n = lastIndex + 1;\n                }\n\n                for (; i < n; i++) {\n                  if (~multiDragElements.indexOf(children[i])) continue;\n                  toggleClass(children[i], options.selectedClass, true);\n                  multiDragElements.push(children[i]);\n                  dispatchEvent({\n                    sortable: sortable,\n                    rootEl: rootEl,\n                    name: 'select',\n                    targetEl: children[i],\n                    originalEvt: evt\n                  });\n                }\n              }\n            } else {\n              lastMultiDragSelect = dragEl$1;\n            }\n\n            multiDragSortable = toSortable;\n          } else {\n            multiDragElements.splice(multiDragElements.indexOf(dragEl$1), 1);\n            lastMultiDragSelect = null;\n            dispatchEvent({\n              sortable: sortable,\n              rootEl: rootEl,\n              name: 'deselect',\n              targetEl: dragEl$1,\n              originalEvt: evt\n            });\n          }\n        } // Multi-drag drop\n\n\n        if (dragStarted && this.isMultiDrag) {\n          // Do not \"unfold\" after around dragEl if reverted\n          if ((parentEl[expando].options.sort || parentEl !== rootEl) && multiDragElements.length > 1) {\n            var dragRect = getRect(dragEl$1),\n                multiDragIndex = index(dragEl$1, ':not(.' + this.options.selectedClass + ')');\n            if (!initialFolding && options.animation) dragEl$1.thisAnimationDuration = null;\n            toSortable.captureAnimationState();\n\n            if (!initialFolding) {\n              if (options.animation) {\n                dragEl$1.fromRect = dragRect;\n                multiDragElements.forEach(function (multiDragElement) {\n                  multiDragElement.thisAnimationDuration = null;\n\n                  if (multiDragElement !== dragEl$1) {\n                    var rect = folding ? getRect(multiDragElement) : dragRect;\n                    multiDragElement.fromRect = rect; // Prepare unfold animation\n\n                    toSortable.addAnimationState({\n                      target: multiDragElement,\n                      rect: rect\n                    });\n                  }\n                });\n              } // Multi drag elements are not necessarily removed from the DOM on drop, so to reinsert\n              // properly they must all be removed\n\n\n              removeMultiDragElements();\n              multiDragElements.forEach(function (multiDragElement) {\n                if (children[multiDragIndex]) {\n                  parentEl.insertBefore(multiDragElement, children[multiDragIndex]);\n                } else {\n                  parentEl.appendChild(multiDragElement);\n                }\n\n                multiDragIndex++;\n              }); // If initial folding is done, the elements may have changed position because they are now\n              // unfolding around dragEl, even though dragEl may not have his index changed, so update event\n              // must be fired here as Sortable will not.\n\n              if (oldIndex === index(dragEl$1)) {\n                var update = false;\n                multiDragElements.forEach(function (multiDragElement) {\n                  if (multiDragElement.sortableIndex !== index(multiDragElement)) {\n                    update = true;\n                    return;\n                  }\n                });\n\n                if (update) {\n                  dispatchSortableEvent('update');\n                }\n              }\n            } // Must be done after capturing individual rects (scroll bar)\n\n\n            multiDragElements.forEach(function (multiDragElement) {\n              unsetRect(multiDragElement);\n            });\n            toSortable.animateAll();\n          }\n\n          multiDragSortable = toSortable;\n        } // Remove clones if necessary\n\n\n        if (rootEl === parentEl || putSortable && putSortable.lastPutMode !== 'clone') {\n          multiDragClones.forEach(function (clone) {\n            clone.parentNode && clone.parentNode.removeChild(clone);\n          });\n        }\n      },\n      nullingGlobal: function nullingGlobal() {\n        this.isMultiDrag = dragStarted = false;\n        multiDragClones.length = 0;\n      },\n      destroyGlobal: function destroyGlobal() {\n        this._deselectMultiDrag();\n\n        off(document, 'pointerup', this._deselectMultiDrag);\n        off(document, 'mouseup', this._deselectMultiDrag);\n        off(document, 'touchend', this._deselectMultiDrag);\n        off(document, 'keydown', this._checkKeyDown);\n        off(document, 'keyup', this._checkKeyUp);\n      },\n      _deselectMultiDrag: function _deselectMultiDrag(evt) {\n        if (typeof dragStarted !== \"undefined\" && dragStarted) return; // Only deselect if selection is in this sortable\n\n        if (multiDragSortable !== this.sortable) return; // Only deselect if target is not item in this sortable\n\n        if (evt && closest(evt.target, this.options.draggable, this.sortable.el, false)) return; // Only deselect if left click\n\n        if (evt && evt.button !== 0) return;\n\n        while (multiDragElements.length) {\n          var el = multiDragElements[0];\n          toggleClass(el, this.options.selectedClass, false);\n          multiDragElements.shift();\n          dispatchEvent({\n            sortable: this.sortable,\n            rootEl: this.sortable.el,\n            name: 'deselect',\n            targetEl: el,\n            originalEvt: evt\n          });\n        }\n      },\n      _checkKeyDown: function _checkKeyDown(evt) {\n        if (evt.key === this.options.multiDragKey) {\n          this.multiDragKeyDown = true;\n        }\n      },\n      _checkKeyUp: function _checkKeyUp(evt) {\n        if (evt.key === this.options.multiDragKey) {\n          this.multiDragKeyDown = false;\n        }\n      }\n    };\n    return _extends(MultiDrag, {\n      // Static methods & properties\n      pluginName: 'multiDrag',\n      utils: {\n        /**\r\n         * Selects the provided multi-drag item\r\n         * @param  {HTMLElement} el    The element to be selected\r\n         */\n        select: function select(el) {\n          var sortable = el.parentNode[expando];\n          if (!sortable || !sortable.options.multiDrag || ~multiDragElements.indexOf(el)) return;\n\n          if (multiDragSortable && multiDragSortable !== sortable) {\n            multiDragSortable.multiDrag._deselectMultiDrag();\n\n            multiDragSortable = sortable;\n          }\n\n          toggleClass(el, sortable.options.selectedClass, true);\n          multiDragElements.push(el);\n        },\n\n        /**\r\n         * Deselects the provided multi-drag item\r\n         * @param  {HTMLElement} el    The element to be deselected\r\n         */\n        deselect: function deselect(el) {\n          var sortable = el.parentNode[expando],\n              index = multiDragElements.indexOf(el);\n          if (!sortable || !sortable.options.multiDrag || !~index) return;\n          toggleClass(el, sortable.options.selectedClass, false);\n          multiDragElements.splice(index, 1);\n        }\n      },\n      eventProperties: function eventProperties() {\n        var _this3 = this;\n\n        var oldIndicies = [],\n            newIndicies = [];\n        multiDragElements.forEach(function (multiDragElement) {\n          oldIndicies.push({\n            multiDragElement: multiDragElement,\n            index: multiDragElement.sortableIndex\n          }); // multiDragElements will already be sorted if folding\n\n          var newIndex;\n\n          if (folding && multiDragElement !== dragEl$1) {\n            newIndex = -1;\n          } else if (folding) {\n            newIndex = index(multiDragElement, ':not(.' + _this3.options.selectedClass + ')');\n          } else {\n            newIndex = index(multiDragElement);\n          }\n\n          newIndicies.push({\n            multiDragElement: multiDragElement,\n            index: newIndex\n          });\n        });\n        return {\n          items: _toConsumableArray(multiDragElements),\n          clones: [].concat(multiDragClones),\n          oldIndicies: oldIndicies,\n          newIndicies: newIndicies\n        };\n      },\n      optionListeners: {\n        multiDragKey: function multiDragKey(key) {\n          key = key.toLowerCase();\n\n          if (key === 'ctrl') {\n            key = 'Control';\n          } else if (key.length > 1) {\n            key = key.charAt(0).toUpperCase() + key.substr(1);\n          }\n\n          return key;\n        }\n      }\n    });\n  }\n\n  function insertMultiDragElements(clonesInserted, rootEl) {\n    multiDragElements.forEach(function (multiDragElement, i) {\n      var target = rootEl.children[multiDragElement.sortableIndex + (clonesInserted ? Number(i) : 0)];\n\n      if (target) {\n        rootEl.insertBefore(multiDragElement, target);\n      } else {\n        rootEl.appendChild(multiDragElement);\n      }\n    });\n  }\n  /**\r\n   * Insert multi-drag clones\r\n   * @param  {[Boolean]} elementsInserted  Whether the multi-drag elements are inserted\r\n   * @param  {HTMLElement} rootEl\r\n   */\n\n\n  function insertMultiDragClones(elementsInserted, rootEl) {\n    multiDragClones.forEach(function (clone, i) {\n      var target = rootEl.children[clone.sortableIndex + (elementsInserted ? Number(i) : 0)];\n\n      if (target) {\n        rootEl.insertBefore(clone, target);\n      } else {\n        rootEl.appendChild(clone);\n      }\n    });\n  }\n\n  function removeMultiDragElements() {\n    multiDragElements.forEach(function (multiDragElement) {\n      if (multiDragElement === dragEl$1) return;\n      multiDragElement.parentNode && multiDragElement.parentNode.removeChild(multiDragElement);\n    });\n  }\n\n  Sortable.mount(new AutoScrollPlugin());\n  Sortable.mount(Remove, Revert);\n\n  Sortable.mount(new SwapPlugin());\n  Sortable.mount(new MultiDragPlugin());\n\n  return Sortable;\n\n}));\n","import * as utils from './modules/utils.mjs'\nimport * as search from './modules/search.mjs'\nimport setDashboardPreferences from './modules/preferences/dashboard.mjs'\nimport { cloneAndUpdateMenu } from './modules/utils.mjs'\nimport setMenuPreferences from './modules/preferences/menu.mjs'\nimport urgentAnnouncement from './web-components/urgent-announcement.mjs'\nimport { WC_announcementsWidget } from './web-components/announcements.mjs'\nimport * as unreadAnnouncements from './modules/unreadAnnouncements.mjs'\nimport * as notify from './modules/notify.mjs'\n\nconst page = document.querySelector('main').id.toLowerCase()\n\nif (page !== 'account') {\n    cloneAndUpdateMenu()\n}\n\n//init web components\nif (page === 'dashboard') {\n    utils.appendWidgets(utils.getPreferences())\n\n    if (utils.storageAvailable('localStorage')) {\n        const collapsedLS = utils.getLocalStorage('collapsed')\n        if (!collapsedLS) {\n            const obj = {\n                announcements: true,\n                courses: true,\n                schedule: true,\n                progress: true\n            }\n            utils.setLocalStorage('collapsed', obj)\n        }\n    }\n}\n\nif (page === 'account') {\n    setDashboardPreferences()\n    setMenuPreferences()\n}\n\nif (page === 'announcements-overview') {\n    const announcementList = document.getElementById('announcements')\n    announcementList.remove()\n    document.querySelector('main section').append(document.createElement('announcements-widget'))\n    WC_announcementsWidget(page)\n}\n\n\n//check if browser is online\nif (navigator.onLine) {\n    //urgent announcements\n    const socket = io()\n\n    //subscribe to urgent-announcements\n    socket.emit('join', page)\n\n    //on urgent-announcement hook update interface (see WC_urgentAnnouncement)\n    socket.on('urgent-announcement', announcement => {\n        const urgentAnnouncement = document.querySelector('urgent-announcement')\n\n        if (utils.exists([urgentAnnouncement])) {\n            urgentAnnouncement.setAttribute('message', announcement.content)\n            urgentAnnouncement.setAttribute('uid', announcement.newsItemId)\n        }\n\n        if ('Notification' in window) {\n            navigator.serviceWorker.ready //wait for sw to be ready\n                .then(registration => {\n                    Notification.requestPermission(status => {\n                        notify.displayNotification(announcement.title, announcement.content)\n                    })\n                })\n        }\n    })\n}\n\n\n\n\n//menu \nconst menuIcon = document.getElementById('menu-icon')\nconst menu = document.getElementById('menu')\n\nif (utils.exists([menuIcon, menu])) {\n    document.querySelector('#fallback').remove()\n\n    //toggle menu (on mobile)\n    menuIcon.addEventListener('click', event => {\n        event.preventDefault()\n\n        menu.classList.toggle('hide')\n    })\n}\n\n\n\n\n//search \nconst searchBar = document.getElementById('search-bar')\nconst searchResetIcon = document.getElementById('search-reset')\nconst searchIcon = document.querySelector('#search-container input[type=submit]')\n\nif (utils.exists([searchBar, searchResetIcon, searchIcon])) {\n\n    //control search-reset icon \n    searchBar.addEventListener('focus', () => search.showReset())\n    searchBar.addEventListener('blur', () => search.hideReset())\n\n\n    //reset search input\n    searchResetIcon.addEventListener('click', e => search.reset(e))\n\n\n    //depending on search-query either give focus to searchbar or submit search-query\n    searchIcon.addEventListener('click', e => {\n        if (searchBar.value === \"\") {\n            search.focus(e)\n        }\n    })\n\n\n    //listen to keyboard input\n    document.addEventListener('keypress', e => {\n        switch (e.key) {\n            case \"/\":\n                search.focus(e) //give searchbar focus and hide search-reset icon\n                break\n        }\n    })\n}\n\n\n//unread announcement indicator in menu\nconst announcementMenuItem = document.querySelector('#menu-primary-links a:last-of-type')\n\nif (utils.exists([announcementMenuItem]) && utils.storageAvailable('localStorage')) {\n    unreadAnnouncements.indicate(announcementMenuItem)\n}","export function displayNotification(title, body) {\n    if (Notification.permission === 'granted') {\n        navigator.serviceWorker.getRegistration().then(reg => {\n            const options = {\n                body,\n                icon: './media/icons/hva-logo-purple.svg',\n                vibrate: [100, 50, 100],\n                data: {\n                    timestamp: Date.now()\n                },\n                actions: [{\n                        action: 'goto',\n                        title: 'Go to HvA Portal',\n                        icon: './media/icons/hva-logo-purple.svg'\n                    },\n                    {\n                        action: 'close',\n                        title: 'Close notification',\n                        icon: './media/icons/hva-logo-purple.svg'\n                    },\n                ]\n            }\n            reg.showNotification(title, options)\n        })\n    }\n}","import { setLocalStorage, getLocalStorage } from '../../modules/utils.mjs'\nimport Sortable from 'sortablejs'\n\nconst container = document.querySelector('#preferences')\nexport default function setDashboardPreferences() {\n    container.classList.remove('disabled')\n\n    getPreferences()\n    stateHandler()\n    dragHandler()\n}\n\nfunction getPreferences() {\n    const preferences = getLocalStorage('preferences')\n    if (preferences) {\n        container.textContent = ''\n        preferences.forEach(preference => container.append(createLabels(preference)))\n    } else {\n        setPreferencesObject()\n    }\n}\n\nfunction dragHandler() {\n    const preferencesContainer = document.querySelector('#preferences')\n\n    new Sortable(preferencesContainer, {\n        draggable: \".on\",\n        animation: 150,\n        onStart: (event) => addStylingToDropZones(event),\n        onEnd: (event) => {\n            removeStylingFromDropZones(event)\n            setPreferencesObject()\n        }\n    })\n}\n\nfunction addStylingToDropZones(event) {\n    const dragLocations = [...event.target.querySelectorAll('label:not(.sortable-chosen)')]\n    dragLocations.forEach(location => location.classList.add('optional-location'))\n}\n\nfunction removeStylingFromDropZones(event) {\n    const dragLocations = [...event.target.querySelectorAll('label:not(.sortable-chosen)')]\n    dragLocations.forEach(location => location.classList.remove('optional-location'))\n}\n\n// Saving and changing preferences \nfunction setPreferencesObject() {\n    const inputs = [...document.querySelectorAll('#preferences label')]\n    let preferences = []\n\n    inputs.forEach(label => {\n        // Data\n        const id = label.id\n        const text = label.textContent\n        const state = label.querySelector('input').checked\n\n        // Set LocalStorage\n        const object = { id: id, name: text, state: state }\n        preferences.push(object)\n        setLocalStorage('preferences', preferences)\n    })\n\n    return preferences\n}\n\nfunction stateHandler() {\n    const inputs = [...document.querySelectorAll('#preferences label')]\n    const data = getLocalStorage('preferences')\n\n    inputs.forEach(label => {\n        updateState(data, label)\n\n        label.addEventListener('change', event => {\n            // Data\n            const id = label.id\n            const state = event.target.checked\n\n            // Change LocalStorage\n            const preference = data.find(preference => preference.id === id)\n            preference.state = state\n            setLocalStorage('preferences', data)\n\n            // Change state visualy\n            if (preference.state) {\n                label.classList.add('on')\n                label.classList.remove('off')\n            } else {\n                label.classList.add('off')\n                label.classList.remove('on')\n                container.appendChild(label)\n                setPreferencesObject()\n            }\n        })\n    })\n}\n\nfunction updateState(data, element) {\n    const preference = data.find(preference => preference.id === element.id)\n    preference.state ? element.classList.remove('off') : element.classList.add('on')\n}\n\n// Rearanging order\nfunction createLabels(preference) {\n    const label = document.createElement('label')\n    label.id = preference.id\n    preference.state ? label.className = 'on' : label.className = 'off'\n\n    label.setAttribute('represents', preference.id)\n\n    const input = document.createElement('input')\n    input.type = 'checkbox'\n    input.checked = preference.state\n\n    label.append(input)\n    label.append(preference.name)\n\n    return label\n}","import { setLocalStorage, getLocalStorage, storageAvailable } from '../../modules/utils.mjs'\nimport Sortable from 'sortablejs'\n\nconst container = document.querySelector('#menu-preferences')\nconst secondaryLinks = document.querySelector('#menu-secondary-links')\nconst clonedLinks = [...secondaryLinks.cloneNode(true).children]\n\nexport default function setMenuPreferences() {\n    container.classList.remove('disabled')\n\n    checker() ? renderPreferences() : setPreferences()\n    stateHandler()\n    dragHandler()\n    cloneAndUpdateMenu()\n}\n\nfunction cloneAndUpdateMenu() {\n    let selectedMenuItems = []\n\n    // LocalStorage\n    const preferences = getLocalStorage('menu-preferences')\n    preferences.forEach(preference => {\n        clonedLinks.forEach(link => {\n            const name = link.querySelector('p:first-of-type').textContent\n\n            if (preference.name === name && preference.state) {\n                selectedMenuItems.push(link)\n            }\n        })\n    })\n\n    secondaryLinks.textContent = ''\n    selectedMenuItems.forEach(item => secondaryLinks.append(item))\n}\n\nfunction stateHandler() {\n    const labels = [...container.querySelectorAll('label')]\n\n    labels.forEach(label => {\n        label.addEventListener('change', () => {\n            setPreferences()\n\n            if (label.className === 'off') {\n                container.append(label)\n                setPreferences()\n            }\n\n            if (label.className === 'on') {\n                const firstOff = document.querySelector('#menu-preferences .off')\n                container.insertBefore(label, firstOff)\n            }\n        })\n    })\n}\n\nfunction renderPreferences() {\n    const elements = createElements()\n    appendElements(elements)\n}\n\nfunction appendElements(elements) {\n    container.textContent = ''\n    elements.forEach(element => container.append(element))\n}\n\nfunction createElements() {\n    const preferences = getLocalStorage('menu-preferences')\n    const elements = []\n\n    preferences.forEach(preference => {\n        const label = document.createElement('label')\n        preference.state ? label.className = 'on' : label.className = 'off'\n\n        const handle = document.createElement('span')\n        handle.classList.add('handle')\n\n        const input = document.createElement('input')\n        input.type = 'checkbox'\n        input.checked = preference.state\n\n        label.append(handle)\n        label.append(input)\n        label.append(preference.name)\n\n        elements.push(label)\n    })\n\n    return elements\n}\n\nfunction checker() {\n    return storageAvailable('localStorage') && getLocalStorage('menu-preferences') ?\n        true : false\n}\n\nfunction dragHandler() {\n    new Sortable(container, {\n        animation: 150,\n        onStart: (event) => addStylingToDropZones(event),\n        onEnd: () => {\n            removeStylingFromDropZones(event)\n            setPreferences()\n        }\n    })\n}\n\nfunction addStylingToDropZones(event) {\n    const dragLocations = [...event.target.querySelectorAll('label:not(.sortable-chosen)')]\n    dragLocations.forEach(location => location.classList.add('optional-location'))\n}\n\nfunction removeStylingFromDropZones(event) {\n    const dragLocations = [...event.target.querySelectorAll('label:not(.sortable-chosen)')]\n    dragLocations.forEach(location => location.classList.remove('optional-location'))\n}\n\nfunction setPreferences() {\n    const labels = [...container.querySelectorAll('label')]\n    let preferences = []\n\n    labels.forEach(label => {\n        const text = label.textContent\n        const state = label.querySelector('input').checked\n        state ? label.className = 'on' : label.className = 'off'\n\n        const object = { name: text, state: state }\n        preferences.push(object)\n    })\n\n    setLocalStorage('menu-preferences', preferences)\n    cloneAndUpdateMenu()\n}","const searchBar = document.getElementById('search-bar')\nconst searchResetIcon = document.getElementById('search-reset')\n\nexport function focus(e) {\n    e.preventDefault()\n    searchBar.focus()\n}\n\nexport function showReset() {\n    searchResetIcon.classList.remove('hide')\n}\n\nexport function hideReset() {\n    if (searchBar.value === \"\") {\n        searchResetIcon.classList.add('hide')\n    }\n}\n\nexport function reset(e) {\n    searchBar.value = \"\"\n    focus(e)\n}","import * as utils from '../modules/utils.mjs'\n\nexport function indicate(item) {\n    getUnread()\n        .then(numberUnread => {\n            if (numberUnread > 0) {\n                item.classList.add('unread-indicator')\n                item.setAttribute('number-unread', numberUnread)\n            }\n        })\n}\n\n\nfunction getAnnouncements() {\n    const options = {\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json' }\n    }\n\n    return fetch('/announcementslist', options).then(res => res.json())\n}\n\nfunction getUnread() {\n    const storedHistory = utils.getLocalStorage('read-history')\n    const numberUnread = getAnnouncements()\n        .then(json => {\n            const [announcements, categories] = json\n            return announcements\n        })\n        .then(announcements => {\n            let numberOfUnread = 0\n            if (storedHistory) {\n                announcements.forEach(announcement => {\n                    if (!storedHistory.includes(announcement.newsItemId)) {\n                        numberOfUnread++\n                    }\n                })\n            } else {\n                document.querySelector('#menu-primary-links a:last-of-type').classList.add('unread-indicator')\n                document.querySelector('#menu-primary-links a:last-of-type').setAttribute('number-unread', announcements.length)\n            }\n            return numberOfUnread\n        })\n    return numberUnread\n}","import { WC_studyprogress } from '../web-components/study-progress.mjs'\nimport { WC_scheduleWidget } from '../web-components/schedule.mjs'\nimport { WC_courseoverview } from '../web-components/course-overview.mjs'\nimport { WC_announcementsWidget } from '../web-components/announcements.mjs'\n\nexport function exists([...variables]) {\n    const exists = variables.every(variable => variable != null)\n    return exists\n}\n\n\nexport function setLocalStorage(name, item) {\n    localStorage.setItem(name, JSON.stringify(item))\n}\n\n\nexport function getLocalStorage(item) {\n    return JSON.parse(localStorage.getItem(item))\n}\n\nexport function storageAvailable(type) { //source: https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API\n    let storage\n    try {\n        storage = window[type]\n        let x = '__storage_test__'\n        storage.setItem(x, x)\n        storage.removeItem(x)\n        return true\n    } catch (e) {\n        return e instanceof DOMException && (\n                e.code === 22 ||\n                e.code === 1014 ||\n                e.name === 'QuotaExceededError' ||\n                e.name === 'NS_ERROR_DOM_QUOTA_REACHED') &&\n            (storage && storage.length !== 0)\n    }\n}\n\nexport function getPreferences() {\n    let widgetElements\n\n    if (storageAvailable('localStorage')) {\n        const preferences = getLocalStorage('preferences')\n        if (preferences) {\n            widgetElements = checker(preferences)\n        } else {\n            widgetElements = ['announcements-widget', 'study-progress', 'course-overview', 'schedule-widget']\n        }\n    } else {\n        widgetElements = ['announcements-widget', 'study-progress', 'course-overview', 'schedule-widget']\n    }\n\n    return widgetElements\n}\n\nexport function appendWidgets(widget) {\n    // Remove EJS templates\n    const domElements = ['announcements', 'study-progress', 'course-overview', 'schedule']\n    domElements.forEach(element => document.getElementById(element).remove())\n\n    // Adding widgets\n    widget.forEach(item => {\n        document.querySelector('#widget-container').append(document.createElement(item))\n\n        if (item === 'study-progress') {\n            WC_studyprogress()\n        }\n        if (item === 'course-overview') {\n            WC_courseoverview()\n        }\n        if (item === 'schedule-widget') {\n            WC_scheduleWidget()\n        }\n        if (item === 'announcements-widget') {\n            WC_announcementsWidget('dashboard')\n        }\n    })\n}\n\nexport function checker(preferences) {\n    const widgetElements = []\n\n    // Announcements\n    preferences.forEach(preference => {\n        preference.id = parseInt(preference.id)\n\n        if (preference.state && preference.id === 0) {\n            widgetElements.push('announcements-widget')\n        }\n        if (preference.state && preference.id === 1) {\n            widgetElements.push('study-progress')\n        }\n        if (preference.state && preference.id === 2) {\n            widgetElements.push('course-overview')\n        }\n        if (preference.state && preference.id === 3) {\n            widgetElements.push('schedule-widget')\n        }\n    })\n\n    return widgetElements\n}\n\nexport function cloneAndUpdateMenu() {\n    const secondaryLinks = document.querySelector('#menu-secondary-links')\n    const clonedLinks = [...secondaryLinks.cloneNode(true).children]\n    let selectedMenuItems = []\n\n    // LocalStorage\n    const preferences = getLocalStorage('menu-preferences')\n    if (preferences) {\n        preferences.forEach(preference => {\n            clonedLinks.forEach(link => {\n                const name = link.querySelector('p:first-of-type').textContent\n\n                if (preference.name === name && preference.state) {\n                    selectedMenuItems.push(link)\n                }\n            })\n        })\n\n        secondaryLinks.textContent = ''\n        selectedMenuItems.forEach(item => secondaryLinks.append(item))\n    }\n}","import * as utils from '../modules/utils.mjs'\n\nexport { init as WC_announcementsWidget }\n\nconst template = document.createElement('template')\ntemplate.innerHTML = `\n<style>\n*:focus {\n    outline: none;\n}\n\n.widget-title {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    border-bottom: 1px solid #DDDDDD;\n    margin-bottom: 15px;\n    cursor: pointer;\n}\n\n.widget-title h2 {\n    font-size: 24px;\n    color: #25167A;\n    text-transform: uppercase;\n\tfont-family: \"OpenSans-Regular\", sans-serif, Arial, Helvetica;\n\tfont-weight: lighter;\n    line-height: 1.1;\n    margin: 0;\n    padding-bottom: 8px;\n}\n\n.widget-title span {\n    font-size: 24px;\n    color: #25167A;\n    text-transform: uppercase;\n\tfont-family: \"OpenSans-Regular\", sans-serif, Arial, Helvetica;\n    font-weight: lighter;\n    padding: 10px;\n}\n\np {\n\tmargin: 0;\n}\n.announcements-container #announcement-legend {\n\tmargin-bottom: 20px;\n}\n.announcements-container #announcement-legend p {\n\tcolor: black;\n\tfont-size: 14px;\n\tdisplay: inline-block;\n    margin-right: 20px;\n    cursor: pointer;\n}\n.announcements-container #announcement-legend p:last-of-type {\n\tmargin-right: 0;\n}\n.announcements-container #announcement-legend p::before {\n\tcontent: \"\";\n\theight: 15px;\n\tmargin-bottom: -2px;\n\twidth: 15px;\n\tmargin-right: 10px;\n    display: inline-block;\n    cursor: pointer;\n}\n.announcements-container #announcement-legend p.Opleiding::before {\n\tbackground-color: #DC143C;\n}\n.announcements-container #announcement-legend p.Faculteit::before {\n\tbackground-color: #DCB614;\n}\n.announcements-container #announcement-legend p.HvA::before {\n\tbackground-color: #149EDC;\n}\n.announcements-container #announcement-legend p.Medezeggenschap::before {\n\tbackground-color: #14DC69;\n}\n.announcements-container #announcement-legend p.unactive {\n    color: #666666;\n}\n.announcements-container #announcement-legend p.unactive::before {\n    background-color: #DDDDDD;\n}\n.announcements-container a {\n\tmargin: 0 0 15px 0;\n\tdisplay: block;\n\tcolor: black;\n\ttext-decoration: none;\n}\n.announcements-container a.hide {\n    position: absolute;\n    left: -9999px;\n}\n.announcements-container a:hover {\n\tbackground-color: #F2F2F2;\n}\n.announcements-container a:focus {\n    background-color: #DDDDDD;\n}\n.announcements-container a:not(.read):focus .read-indicator {\n    left: unset;\n    right: 15px;\n}\n.announcements-container a:focus .read-indicator:hover {\n    background-color: #F2F2F2;\n    border: 1px solid #F2F2F2;\n}\n.announcements-container .announcement {\n\tmargin: 0;\n\tpadding: 5px 0 5px 10px;\n    border-left: 5px solid;\n    position: relative;\n}\n.announcements-container .announcement.Opleiding {\n\tborder-color: #DC143C;\n}\n.announcements-container .announcement.Faculteit {\n\tborder-color: #DCB614;\n}\n.announcements-container .announcement.HvA {\n\tborder-color: #149EDC;\n}\n.announcements-container .announcement.Medezeggenschap {\n\tborder-color: #14DC69;\n}\n.announcements-container .announcement p:first-of-type {\n    font-family: \"OpenSans-Bold\", sans-serif, Arial, Helvetica;\n}\n.announcements-container .read .announcement p:first-of-type {\n    font-family: \"OpenSans-Regular\", sans-serif, Arial, Helvetica;\n}\n.announcements-container .announcement p:last-of-type {\n\tcolor: #666666;\n\tfont-size: 14px;\n}\n.announcements-container .read .announcement {\n    position: static;\n}    \n.announcements-container a:not(.read) .announcement:hover .read-indicator {\n    left: unset;\n    right: 15px;\n}\n.announcements-container .read .announcement .read-indicator {\n    position: absolute;\n    left: -9999px;\n}\n.announcements-container.collapsed, \n.announcements-container.collapsed + a {\n    position: absolute;\n    left: -9999px;\n}\n.allAnnouncements {\n    margin-top: 30px;\n    text-decoration: none;\n    color: #25167A;\n    display: flex;\n\talign-items: center;\n}\n.allAnnouncements:hover,\n.allAnnouncements:focus {\n        text-decoration: underline;\n}\n.allAnnouncements.hide {\n    position: absolute;\n    left: -9999px;\n}\n.allAnnouncements img {\n        height: 12px;\n        margin-left: 20px;\n}\n#announcement-legend:empty {\n    height: 150px;\n    width: 100%;\n    background: url(media/icons/loader.gif);\n    background-repeat: no-repeat;\n    background-position: center center;\n    background-size: 200px 200px;\n}\n.read-indicator {\n    position: absolute;\n    top: 50%;\n    left: -9999px;\n    transform: translateY(-50%);\n    padding: 13px;\n    border: 1px solid transparent;\n    border-radius: 999px;\n    background-image: url(../media/icons/mark-as-read.svg);\n    background-repeat: no-repeat;\n    background-size: 20px;\n    background-position: center;\n}\n.read-indicator:hover {\n    background-color: #DDDDDD;\n    border: 1px solid #DDDDDD;\n}\n.read-indicator:focus {\n    background-color: #F2F2F2;\n    border: 1px solid #F2F2F2;\n}\n</style>\n<div id=\"announcements\"></div>\n<div class=\"widget-title\"><h2>Mededelingen</h2><span>-</span></div>\n<div class=\"announcements-container\">\n\t<div id=\"announcement-legend\"></div>\n</div>\n<a class=\"allAnnouncements\" href=\"/announcements/\" target=\"_self\">Alle mededelingen\n\t<img src=\"/media/icons/arrow-right.svg\" alt=\"arrow-right\"></img>\n</a>`\n\nfunction init(pageName) {\n    class announcementList extends HTMLElement {\n        constructor() {\n            super()\n\n            this.attachShadow({ mode: 'open' })\n            this.shadowRoot.appendChild(template.content.cloneNode(true))\n\n            this.getData()\n                .then(json => {\n                    const [announcements, categories] = json\n                    this.createLegenda(categories)\n                    if (pageName === 'dashboard') {\n                        announcements.splice(5, announcements.length)\n                    }\n                    this.appendAnnouncements(announcements)\n\n                    if (this.filteredCats && this.filteredCats.length > 0) {\n                        this.filteredCats.forEach(cat => {\n                            this.shadowRoot.querySelectorAll(`.announcements-container > a`).forEach(item => {\n                                if (item.classList.contains(cat)) {\n                                    item.classList.add('hide')\n                                }\n                            })\n\n\n                            const catFilter = this.shadowRoot.querySelector(`.${cat}`)\n                            catFilter.classList.add('unactive')\n                        })\n                    }\n                })\n\n            this.announcementContainer = this.shadowRoot.querySelector('.announcements-container')\n            this.announcementLegend = this.shadowRoot.querySelector('#announcement-legend')\n\n            const widgetTitle = this.shadowRoot.querySelector('.widget-title')\n            widgetTitle.addEventListener('click', () => {\n                this.announcementContainer.classList.toggle('collapsed')\n\n                if (this.announcementContainer.classList.contains('collapsed')) {\n                    widgetTitle.querySelector('span').textContent = \"+\"\n                } else {\n                    widgetTitle.querySelector('span').textContent = \"-\"\n                }\n\n                if (utils.storageAvailable('localStorage')) {\n                    const collapsed = utils.getLocalStorage('collapsed')\n                    collapsed.announcements = !collapsed.announcements\n                    utils.setLocalStorage('collapsed', collapsed)\n                }\n            })\n\n            if (utils.storageAvailable('localStorage')) {\n                const storedFilters = utils.getLocalStorage('filters')\n                this.filteredCats = storedFilters ? storedFilters : []\n\n                const collapsed = utils.getLocalStorage('collapsed')\n                if (!collapsed.announcements) {\n                    this.announcementContainer.classList.toggle('collapsed')\n                    widgetTitle.querySelector('span').textContent = \"+\"\n                }\n            }\n\n            if (pageName === 'announcements-overview') {\n                this.shadowRoot.querySelector('.allAnnouncements').classList.add('hide')\n            }\n        }\n\n        getData() {\n            const options = {\n                method: 'GET',\n                headers: { 'Content-Type': 'application/json' }\n            }\n\n            return fetch('/announcementslist', options).then(res => res.json())\n        }\n\n        createLegenda(categories) {\n            categories.forEach(cat => {\n                this.announcementLegend.insertAdjacentHTML('beforeend', `<p class=\"${cat}\">${cat}</p>`)\n\n                const legendItem = this.shadowRoot.querySelector(`.${cat}`)\n                legendItem.addEventListener('click', e => this.filter(e.target))\n            })\n        }\n\n        appendAnnouncements(announcements) {\n            announcements.forEach(announcement => {\n                this.announcementContainer.insertAdjacentHTML('beforeend', `\n\t\t\t\t<a href=\"/announcements/${announcement.newsItemId}\" target=\"_self\" uid=\"${announcement.newsItemId}\" class=\"${announcement.tags[0]}\">\n\t\t\t\t\t<div class=\"announcement ${announcement.tags[0]}\" id=\"${announcement.newsItemId}\">\n                \t\t<p>${announcement.title}</p>\n                        <p>${announcement.publishDate} - ${announcement.tags[0]}</p>\n                        <span class=\"read-indicator\"></span>\n           \t\t\t</div>\n\t\t\t\t</a>`)\n\n                if (utils.storageAvailable('localStorage')) {\n                    const storedHistory = utils.getLocalStorage('read-history')\n                    this.readHistory = storedHistory ? storedHistory : []\n\n                    const link = this.announcementContainer.querySelector('a:last-of-type')\n\n                    if (this.readHistory.includes(link.getAttribute('uid'))) {\n                        link.classList.add('read')\n                    }\n                    link.addEventListener('click', () => this.store(link))\n\n                    const readIndicator = link.querySelector('.read-indicator')\n                    readIndicator.addEventListener('click', e => this.mark(e, link))\n                }\n            })\n        }\n\n        store(announcement) {\n            this.readHistory.push(announcement.getAttribute('uid'))\n            utils.setLocalStorage('read-history', this.readHistory)\n        }\n\n        filter(el) {\n            if (!this.filteredCats.includes(el.textContent)) {\n                this.filteredCats.push(el.textContent)\n            } else {\n                const index = this.filteredCats.indexOf(el.textContent)\n                this.filteredCats.splice(index, 1)\n            }\n\n            el.classList.toggle('unactive')\n\n            utils.setLocalStorage('filters', this.filteredCats)\n\n            const announcementsInFilteredCat = []\n            this.filteredCats.forEach(cat => {\n                const announcementsInCat = this.shadowRoot.querySelectorAll(`.announcements-container > a.${cat}`)\n                announcementsInFilteredCat.push(...announcementsInCat)\n            })\n\n            this.shadowRoot.querySelectorAll(`.announcements-container > a`).forEach(item => {\n                if (announcementsInFilteredCat.includes(item)) {\n                    item.classList.add('hide')\n                } else {\n                    item.classList.remove('hide')\n                }\n            })\n        }\n\n        mark(e, link) {\n            e.preventDefault()\n            link.classList.add('read')\n            link.blur()\n        }\n    }\n\n    window.customElements.define('announcements-widget', announcementList)\n}","import * as utils from '../modules/utils.mjs'\n\nexport { init as WC_courseoverview }\n\nconst template = document.createElement('template')\ntemplate.innerHTML = `\n<style>\n.widget-title {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    border-bottom: 1px solid #DDDDDD;\n    margin-bottom: 15px;\n    cursor: pointer;\n}\n\n.widget-title h2 {\n    font-size: 24px;\n    color: #25167A;\n    text-transform: uppercase;\n\tfont-family: \"OpenSans-Regular\", sans-serif, Arial, Helvetica;\n\tfont-weight: lighter;\n    line-height: 1.1;\n    margin: 0;\n    padding-bottom: 8px;\n}\n\n.widget-title span {\n    font-size: 24px;\n    color: #25167A;\n    text-transform: uppercase;\n\tfont-family: \"OpenSans-Regular\", sans-serif, Arial, Helvetica;\n    font-weight: lighter;\n    padding: 10px;\n}\n\np {\n\tmargin: 0;\n}\n\n.navigator {\n    background-color: #DDDDDD;\n    padding: 5px 10px;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    color: #25167A;\n    font-size: 16px;\n}\n\n.navigator span  {\n    cursor: default;\n}\n\n.navigator img {\n    padding: 10px;\n}\n\n.navigator img:not(.disabled) {\n    cursor: pointer;\n}\n\n.navigator img.disabled {\n    pointer-events: none;\n    opacity: .5;\n}\n\n.course {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-column-gap: 20px;\n    padding: 15px 20px;\n    border-bottom: 1px solid #DDDDDD;\n}\n\n.course p:first-of-type {\n    font-family: \"OpenSans-Bold\", sans-serif, Arial, Helvetica;\n    align-self: center;\n}\n\n.course ul {\n    list-style: none;\n    margin: 0;\n    padding: 0;\n    align-self: center;\n}\n\n.course ul li {\n    display: inline;\n}\n\n.course ul li:not(:last-of-type):after {\n    content: \", \";\n    white-space: pre;\n}\n\na {\n    margin-top: 30px;\n    text-decoration: none;\n    color: #25167A;\n    display: flex;\n    align-items: center;\n}\n\na:hover,\na:focus {\n    text-decoration: underline;\n    outline: none;\n}\n\na img {\n    height: 12px;\n    margin-left: 20px;\n}\n\n#course-overview:empty {\n    height: 150px;\n    width: 100%;\n    background: url(media/icons/loader.gif);\n    background-repeat: no-repeat;\n    background-position: center center;\n    background-size: 200px 200px;\n}\n.navigator.collapsed,\n#course-overview.collapsed,\n#course-overview.collapsed + a {\n    position: absolute;\n    left: -9999px;\n}\n</style>\n\n<div class=\"widget-title\">\n    <h2>Vakkenoverzicht</h2>\n    <span>-</span>\n</div>\n\n<div class=\"navigator\">\n    <img src=\"/media/icons/arrow-left.svg\" alt=\"arrow-left\"></img>\n    <span></span>\n    <img src=\"/media/icons/arrow-right.svg\" alt=\"arrow-right\"></img>\n</div>\n\n<div id=\"course-overview\"></div>\n\n<a target=\"_blank\" href=\"https://sis.hva.nl/\">Volledig overzicht\n    <img src=\"/media/icons/arrow-right.svg\" alt=\"arrow-right\"></img>\n</a>\n`\n\nfunction init() {\n    class CourseOverview extends HTMLElement {\n        constructor() {\n            super()\n\n            this.attachShadow({ mode: 'open' })\n            this.shadowRoot.appendChild(template.content.cloneNode(true))\n\n            this.courseContainer = this.shadowRoot.querySelector('#course-overview')\n            this.courseMoment = this.shadowRoot.querySelector('.navigator span')\n            this.arrowPrevious = this.shadowRoot.querySelector('.navigator img:first-of-type')\n            this.arrowNext = this.shadowRoot.querySelector('.navigator img:last-of-type')\n            this.yearIndex = 2\n            this.quarterIndex = 3\n\n            this.data = this.getData().then(json => {\n                this.navigateHandler()\n\n                const data = json[this.yearIndex].quarters[this.quarterIndex].courses\n                this.updateCourseOverview(data)\n\n                this.data = json\n            })\n\n            this.arrowPrevious.addEventListener('click', () => this.navigate('previous'))\n            this.arrowNext.addEventListener('click', () => this.navigate('next'))\n\n            const widgetTitle = this.shadowRoot.querySelector('.widget-title')\n            widgetTitle.addEventListener('click', () => {\n                this.shadowRoot.querySelector('.navigator').classList.toggle('collapsed')\n                this.courseContainer.classList.toggle('collapsed')\n\n                if (this.shadowRoot.querySelector('.navigator').classList.contains('collapsed')) {\n                    widgetTitle.querySelector('span').textContent = \"+\"\n                } else {\n                    widgetTitle.querySelector('span').textContent = \"-\"\n                }\n\n                if (utils.storageAvailable('localStorage')) {\n                    const collapsed = utils.getLocalStorage('collapsed')\n                    collapsed.courses = !collapsed.courses\n                    utils.setLocalStorage('collapsed', collapsed)\n                }\n            })\n\n            if (utils.storageAvailable('localStorage')) {\n                const collapsed = utils.getLocalStorage('collapsed')\n                if (!collapsed.courses) {\n                    this.shadowRoot.querySelector('.navigator').classList.toggle('collapsed')\n                    this.courseContainer.classList.toggle('collapsed')\n                    widgetTitle.querySelector('span').textContent = \"+\"\n                }\n            }\n        }\n\n        updateNavigator() {\n            this.courseMoment.textContent = `Jaar ${this.yearIndex + 1} - Blok ${this.quarterIndex + 1}`\n        }\n\n        updateCourseOverview(courses) {\n            this.courseContainer.textContent = \"\"\n            this.updateNavigator()\n\n            courses.forEach(course => {\n                const div = document.createElement('div')\n                div.classList.add('course')\n\n                const courseName = document.createElement('p')\n                courseName.textContent = course.course\n                div.append(courseName)\n\n                const list = document.createElement('ul')\n                course.lecturers.forEach(lecturer => {\n                    const teacher = document.createElement('li')\n                    lecturer === \"\" ? teacher.textContent = 'Geen specifieke docent' : teacher.textContent = lecturer\n                    list.append(teacher)\n                })\n                div.append(list)\n\n                this.courseContainer.append(div)\n            })\n        }\n\n        navigate(direction) {\n            if (direction === 'previous') {\n                if (this.quarterIndex > 0) {\n                    this.quarterIndex--\n                } else if (this.quarterIndex === 0 && this.yearIndex > 0) {\n                    this.quarterIndex = 3\n                    this.yearIndex--\n                }\n            }\n\n            if (direction === 'next') {\n                if (this.quarterIndex < 3) {\n                    this.quarterIndex++\n                } else if (this.quarterIndex === 3 && this.yearIndex < 3) {\n                    this.quarterIndex = 0\n                    this.yearIndex++\n                }\n            }\n\n            this.navigateHandler()\n\n            const data = this.data[this.yearIndex].quarters[this.quarterIndex].courses\n            this.updateCourseOverview(data)\n        }\n\n        navigateHandler() {\n            this.yearIndex === 0 && this.quarterIndex === 0 ?\n                this.arrowPrevious.classList.add('disabled') : this.arrowPrevious.classList.remove('disabled')\n\n            this.yearIndex === 3 && this.quarterIndex === 3 ?\n                this.arrowNext.classList.add('disabled') : this.arrowNext.classList.remove('disabled')\n        }\n\n        // Helpers\n        getData() {\n            const options = {\n                method: 'GET',\n                headers: { 'Content-Type': 'application/json' }\n            }\n\n            return fetch('/courseoverview', options).then(res => res.json())\n        }\n    }\n\n    customElements.define('course-overview', CourseOverview)\n}","import * as utils from '../modules/utils.mjs'\n\nexport { init as WC_scheduleWidget }\n\nconst template = document.createElement('template')\ntemplate.innerHTML = `\n<style>\n.widget-title {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    border-bottom: 1px solid #DDDDDD;\n    margin-bottom: 15px;\n    cursor: pointer;\n}\n\n.widget-title h2 {\n    font-size: 24px;\n    color: #25167A;\n    text-transform: uppercase;\n\tfont-family: \"OpenSans-Regular\", sans-serif, Arial, Helvetica;\n\tfont-weight: lighter;\n    line-height: 1.1;\n    margin: 0;\n    padding-bottom: 8px;\n}\n\n.widget-title span {\n    font-size: 24px;\n    color: #25167A;\n    text-transform: uppercase;\n\tfont-family: \"OpenSans-Regular\", sans-serif, Arial, Helvetica;\n    font-weight: lighter;\n    padding: 10px;\n}\n\np {\n\tmargin: 0;\n}\n\n.navigator {\n    background-color: #DDDDDD;\n    padding: 5px 10px;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    color: #25167A;\n    font-size: 16px;\n}\n\n.navigator span  {\n    cursor: default;\n}\n\n.navigator img {\n    padding: 10px;\n}\n\n.navigator img:not(.disabled) {\n    cursor: pointer;\n}\n\n.navigator img.disabled {\n    pointer-events: none;\n    opacity: .5;\n}\n\n.schedule-course {\n    display: grid;\n    grid-template-columns: auto 1fr;\n    grid-column-gap: 20px;\n    grid-row-gap: 5px;\n    padding: 15px 20px;\n    border-bottom: 1px solid #DDDDDD;\n}\n\n.schedule-course p:first-of-type,\n.schedule-course p:nth-of-type(3) {\n    font-family: \"OpenSans-Bold\", sans-serif, Arial, Helvetica;\n}\n\na {\n    margin-top: 30px;\n    text-decoration: none;\n    color: #25167A;\n    display: flex;\n    align-items: center;\n}\n\na:hover,\na:focus {\n    text-decoration: underline;\n    outline: none;\n}\n\na img {\n    height: 12px;\n    margin-left: 20px;\n}\n\n#schedule-container:empty {\n    height: 150px;\n    width: 100%;\n    background: url(media/icons/loader.gif);\n    background-repeat: no-repeat;\n    background-position: center center;\n    background-size: 200px 200px;\n}\n\n.navigator.collapsed,\n#schedules-container.collapsed,\n#schedules-container.collapsed + a {\n    position: absolute;\n    left: -9999px;\n}\n</style>\n<div class=\"widget-title\">\n    <h2>Dagrooster</h2>\n    <span>-</span>\n</div>\n\n<div class=\"navigator\">\n\t<img src=\"/media/icons/arrow-left.svg\" alt=\"arrow-left\" class=\"disabled\"></img>\n\t<span></span>\n\t<img src=\"/media/icons/arrow-right.svg\" alt=\"arrow-right\"></img>\n</div>\n\n<div id=\"schedules-container\"></div>\n\n<a target=\"_blank\" href=\"https://rooster.hva.nl/schedule\">Volledig rooster\n\t<img src=\"/media/icons/arrow-right.svg\" alt=\"arrow-right\"></img>\n</a>\n`\n\nfunction init() {\n    class schedule extends HTMLElement {\n        constructor() {\n            super()\n\n            this.attachShadow({ mode: 'open' })\n            this.shadowRoot.appendChild(template.content.cloneNode(true))\n\n            this.data = this.getData()\n                .then(json => {\n                    this.updateSchedule(json[0])\n                    this.data = json\n                })\n\n            this.navigator = this.shadowRoot.querySelector('.navigator')\n            this.arrowPrevious = this.navigator.querySelector('img:first-of-type')\n            this.arrowNext = this.navigator.querySelector('img:last-of-type')\n\n            this.arrowNext.addEventListener('click', () => this.navigate('next'))\n            this.arrowPrevious.addEventListener('click', () => this.navigate('previous'))\n            this.index = 0\n\n            const widgetTitle = this.shadowRoot.querySelector('.widget-title')\n            widgetTitle.addEventListener('click', () => {\n                this.shadowRoot.querySelector('.navigator').classList.toggle('collapsed')\n                this.shadowRoot.getElementById('schedules-container').classList.toggle('collapsed')\n\n                if (this.shadowRoot.querySelector('.navigator').classList.contains('collapsed')) {\n                    widgetTitle.querySelector('span').textContent = \"+\"\n                } else {\n                    widgetTitle.querySelector('span').textContent = \"-\"\n                }\n\n                if (utils.storageAvailable('localStorage')) {\n                    const collapsed = utils.getLocalStorage('collapsed')\n                    collapsed.schedule = !collapsed.schedule\n                    utils.setLocalStorage('collapsed', collapsed)\n                }\n            })\n\n            if (utils.storageAvailable('localStorage')) {\n                const collapsed = utils.getLocalStorage('collapsed')\n                if (!collapsed.schedule) {\n                    this.shadowRoot.querySelector('.navigator').classList.toggle('collapsed')\n                    this.shadowRoot.getElementById('schedules-container').classList.toggle('collapsed')\n                    widgetTitle.querySelector('span').textContent = \"+\"\n                }\n            }\n        }\n\n        getData() {\n            const options = {\n                method: 'GET',\n                headers: { 'Content-Type': 'application/json' }\n            }\n\n            return fetch('/schedule', options).then(res => res.json())\n        }\n\n        updateSchedule(data) {\n            const schedulesContainer = this.shadowRoot.getElementById('schedules-container')\n            schedulesContainer.textContent = \"\"\n\n            this.navigator.querySelector('span').textContent = `${data.day} - ${data.month} - ${data.year}`\n\n            data.schedules.forEach(schedule => {\n                const classRoom = schedule._embedded ? schedule._embedded.rooms[0].abbreviation : \"Geen lokaal\"\n\n                const div = document.createElement('div')\n                div.classList.add('schedule-course')\n                schedulesContainer.appendChild(div)\n\n                const time = document.createElement('p')\n                time.textContent = `${schedule.startDateTime.time} - ${schedule.endDateTime.time}`\n                div.appendChild(time)\n\n                const name = document.createElement('p')\n                name.textContent = schedule._links.courses[0].title\n                div.appendChild(name)\n\n                const room = document.createElement('p')\n                room.textContent = classRoom\n                div.appendChild(room)\n\n                const teacher = document.createElement('p')\n                teacher.textContent = schedule._links.lecturers[0].title\n                div.appendChild(teacher)\n            })\n        }\n\n        navigate(direction) {\n            direction === 'previous' ? this.index-- : this.index++\n\n            this.index === 0 ? this.arrowPrevious.classList.add('disabled') : this.arrowPrevious.classList.remove('disabled')\n            this.index === 4 ? this.arrowNext.classList.add('disabled') : this.arrowNext.classList.remove('disabled')\n\n            this.updateSchedule(this.data[this.index])\n        }\n    }\n\n    window.customElements.define('schedule-widget', schedule)\n}","import * as utils from '../modules/utils.mjs'\n\nexport { init as WC_studyprogress }\n\nconst template = document.createElement('template')\ntemplate.innerHTML = `\n<style>\n.widget-title {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    border-bottom: 1px solid #DDDDDD;\n    margin-bottom: 15px;\n    cursor: pointer;\n}\n\n.widget-title h2 {\n    font-size: 24px;\n    color: #25167A;\n    text-transform: uppercase;\n\tfont-family: \"OpenSans-Regular\", sans-serif, Arial, Helvetica;\n\tfont-weight: lighter;\n    line-height: 1.1;\n    margin: 0;\n    padding-bottom: 8px;\n}\n\n.widget-title span {\n    font-size: 24px;\n    color: #25167A;\n    text-transform: uppercase;\n\tfont-family: \"OpenSans-Regular\", sans-serif, Arial, Helvetica;\n    font-weight: lighter;\n    padding: 10px;\n}\n\np {\n    margin: 0;\n}\n\n#recent-results div {\n    display: grid;\n    grid-template-columns: auto 1fr auto;\n    grid-template-rows: 1fr auto;\n}\n\n#recent-results div:not(:last-of-type) {\n    margin-bottom: 15px;\n}\n\n#recent-results span {\n    display: block;\n    grid-column: 1 / 2;\n    grid-row: 1 / 3;\n    width: 5px;\n    height: 100%;\n}\n\nspan.success {\n    background-color: #25167A;\n}\n\nspan.failed {\n    background-color: #DDDDDD;\n}\n\n#recent-results p:nth-of-type(1) {\n    grid-column: 2 / 3;\n    padding: 4px 0px 0px 10px;\n}\n\n#recent-results p:nth-of-type(2) {\n    grid-row: 1 / 3;\n    grid-column: 3 / 4;\n    align-self: center;\n}\n\n#recent-results p:nth-of-type(3) {\n    padding: 0px 0px 4px 10px;\n    font-size: 14px;\n    color: #666666;\n}\n\n#recent-results p:nth-of-type(1),\n#recent-results p:nth-of-type(2) {\n    font-family: \"OpenSans-Bold\", sans-serif, Arial, Helvetica;\n\n}\n\n#recent-progress {\n    margin-top: 30px;\n}\n\n#recent-progress div {\n    display: grid;\n    grid-template-columns: auto 1fr auto;\n}\n\n#recent-progress div span {\n        display: block;\n        width: 5px;\n}\n\n#recent-progress p {\n    padding: 5px 0px;\n}\n\n#recent-progress p:first-of-type {\n    padding-left: 10px;\n}\n\n#recent-progress .current-year {\n    background-color: #DDDDDD;\n}\n\n#recent-progress .current-year span {\n    background-color: #25167A;\n}\n\n#recent-progress .current-year p {\n    font-family: \"OpenSans-Bold\", sans-serif, Arial, Helvetica;\n}\n\n#recent-progress .current-year p:last-of-type {\n    padding-right: 10px;\n}\n\n#link-container {\n    display: flex;\n    justify-content: space-between;\n}\n\n#link-container a {\n    margin-top: 30px;\n    text-decoration: none;\n    color: #25167A;\n    display: flex;\n    align-items: center;\n}\n\n#link-container a:hover,\n#link-container a:focus {\n    text-decoration: underline;\n    outline: none;\n}\n\n#link-container a img {\n    height: 12px;\n    margin-left: 20px;\n}\n\n@media only screen and (max-width: 450px) {\n    #link-container {\n        flex-direction: column;\n    }\n\n    #link-container a:last-of-type {\n        margin-top: 10px;\n    }\n}\n\n#recent-results:empty {\n    height: 150px;\n    width: 100%;\n    background: url(media/icons/loader.gif);\n    background-repeat: no-repeat;\n    background-position: center center;\n    background-size: 200px 200px;\n}\n#recent-results.collapsed,\n#recent-results.collapsed + #recent-progress,\n#link-container.collapsed,\na:first-of-type.collapsed,\na:first-of-type.collapsed + a {\n    position: absolute;\n    left: -9999px;\n}\n</style>\n\n<div class=\"widget-title\">\n    <h2>Studieresultaten en -voortgang</h2>\n    <span>-</span>\n</div>\n\n<div id=\"recent-results\"></div>\n<div id=\"recent-progress\"></div>\n\n<div id=\"link-container\">\n    <a target=\"_blank\" href=\"https://sis.hva.nl:8011/psc/S2PRD/EMPLOYEE/SA/c/SNS_MENU_FLD.SNS_SS_STD_RES_FL.GBL\">Jouw resultaten\n    <img src=\"/media/icons/arrow-right.svg\" alt=\"arrow-right\"></img>\n</a>\n\n<a target=\"_blank\" href=\"https://sis.hva.nl:8011/psc/S2PRD/EMPLOYEE/SA/c/SNS_MENU_FLD.SNS_SS_FLD_ADB.GBL\">Jouw studievoortgang\n    <img src=\"/media/icons/arrow-right.svg\" alt=\"arrow-right\"></img>\n</a>\n</div>\n`\n\nfunction init() {\n    class StudyProgress extends HTMLElement {\n        constructor() {\n            super()\n            this.attachShadow({ mode: 'open' })\n            this.shadowRoot.appendChild(template.content.cloneNode(true))\n\n            this.getData().then(json => {\n                const [results, progress] = json\n\n                this.resultComponent(results)\n                this.progressComponent(progress)\n            })\n\n            this.resultsContainer = this.shadowRoot.querySelector('#recent-results')\n            this.progressContainer = this.shadowRoot.querySelector('#recent-progress')\n\n            const widgetTitle = this.shadowRoot.querySelector('.widget-title')\n            widgetTitle.addEventListener('click', () => {\n                this.shadowRoot.getElementById('recent-results').classList.toggle('collapsed')\n                this.shadowRoot.getElementById('link-container').classList.toggle('collapsed')\n                this.shadowRoot.querySelector('a:first-of-type').classList.toggle('collapsed')\n\n                if (this.shadowRoot.getElementById('recent-results').classList.contains('collapsed')) {\n                    widgetTitle.querySelector('span').textContent = \"+\"\n                } else {\n                    widgetTitle.querySelector('span').textContent = \"-\"\n                }\n\n                if (utils.storageAvailable('localStorage')) {\n                    const collapsed = utils.getLocalStorage('collapsed')\n                    collapsed.progress = !collapsed.progress\n                    utils.setLocalStorage('collapsed', collapsed)\n                }\n            })\n\n            if (utils.storageAvailable('localStorage')) {\n                const collapsed = utils.getLocalStorage('collapsed')\n                if (!collapsed.progress) {\n                    this.shadowRoot.getElementById('recent-results').classList.toggle('collapsed')\n                    this.shadowRoot.getElementById('link-container').classList.toggle('collapsed')\n                    this.shadowRoot.querySelector('a:first-of-type').classList.toggle('collapsed')\n                    widgetTitle.querySelector('span').textContent = \"+\"\n                }\n            }\n        }\n\n        progressComponent(results) {\n            results.forEach(result => {\n                const div = document.createElement('div')\n                if (result.currentYear) {\n                    div.classList.add('current-year')\n                }\n\n                const template = `\n                <span></span>\n                <p>Leerjaar ${result.studyYear}</p>\n                <p>${result.studypoints.achieved}/${result.studypoints.available} studiepunten</p>`\n\n                div.innerHTML = template\n                this.progressContainer.append(div)\n            })\n        }\n\n\n        resultComponent(results) {\n            results.forEach(result => {\n                // Parent container\n                const div = document.createElement('div')\n\n                let indicator\n                if (typeof result.grade === 'number' && result.grade >= 5.5 || result.grade === 'V') {\n                    indicator = `<span class=\"success\"></span>`\n                } else if (typeof result.grade === 'number' && result.grade < 5.5 || result.grade === '-' || result.grade === 'GR') {\n                    indicator = `<span class=\"failed\"></span>`\n                }\n\n                const template = `\n                ${indicator}\n                <p>${result._links.course.title}</p>\n                <p>${result.grade}</p>\n                <p>${result.fullDate}</p>\n                `\n\n                div.innerHTML = template\n                this.resultsContainer.append(div)\n            })\n        }\n\n        // Helpers\n        getData() {\n            const options = {\n                method: 'GET',\n                headers: { 'Content-Type': 'application/json' }\n            }\n\n            return fetch('/studyprogress', options).then(res => res.json())\n        }\n    }\n\n    customElements.define('study-progress', StudyProgress)\n}","import * as utils from '../modules/utils.mjs'\n\nexport { template as WC_urgentAnnouncement }\n\nconst template = document.createElement('template')\ntemplate.innerHTML = `\n<style>\n    div {\n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n        padding: 16px;\n        background-color: #ECE7FA;\n        position: sticky;\n        top: 0;\n    }\n\n    div.hide {\n        position: absolute;\n        left: -9999px;\n    }\n\n    p {\n        margin: 0;\n        padding-right: 10px;\n    }\n\n    @media only screen and (max-width: 768px) {\n        div {\n            top: 60px;\n        }\n    }\n\n    img {\n        cursor: pointer;\n    }\n</style>\n<div class=\"hide\">\n    <p></p>\n    <img src=\"./media/icons/notification-exit.svg\" alt=\"hide notification\">\n</div>`\n\n\n\nclass urgentAnnouncement extends HTMLElement {\n\n    constructor() {\n        super()\n\n        this.attachShadow({ mode: 'open' })\n        this.shadowRoot.appendChild(template.content.cloneNode(true))\n        this.shadowRoot.querySelector('p').textContent = this.getAttribute('message')\n        this.shadowRoot.querySelector('img').addEventListener('click', () => {\n            this.hide()\n            this.store()\n        })\n    }\n\n    static get observedAttributes() {\n        return ['uid']\n    }\n\n    attributeChangedCallback(name, oldValue, newValue) {\n        if (oldValue != newValue && newValue != \"\") {\n            const uid = this.getAttribute('uid')\n            if (utils.storageAvailable('localStorage')) {\n                const storedHistory = utils.getLocalStorage('read-history')\n                if (storedHistory) {\n                    if (!storedHistory.includes(uid)) {\n                        this.updateContent()\n                        this.show()\n                    }\n                } else {\n                    this.updateContent()\n                    this.show()\n                }\n            }\n        }\n    }\n\n    updateContent() {\n        this.shadowRoot.querySelector('p').textContent = this.getAttribute('message')\n    }\n\n    show() {\n        this.shadowRoot.querySelector('div').classList.remove('hide')\n        document.querySelector('main').classList.add('showsNotification')\n    }\n\n    hide() {\n        this.shadowRoot.querySelector('div').classList.add('hide')\n        document.querySelector('main').classList.remove('showsNotification')\n    }\n\n    store() {\n        if (utils.storageAvailable('localStorage')) {\n            const storedHistory = utils.getLocalStorage('read-history')\n            const readHistory = storedHistory ? storedHistory : []\n\n            readHistory.push(this.getAttribute('uid'))\n            utils.setLocalStorage('read-history', readHistory)\n        }\n    }\n}\n\nwindow.customElements.define('urgent-announcement', urgentAnnouncement)"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}